import inspect
import aiomysql
from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import get_connection, safe_close

router = Router()

class PromoActivationState(StatesGroup):
    waiting_for_promo_code = State()

@router.message(F.text == "üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥—ã")
async def promo_activation_start(message: Message, state: FSMContext):
    await state.set_state(PromoActivationState.waiting_for_promo_code)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")

@router.message(PromoActivationState.waiting_for_promo_code)
async def process_promo_activation(message: Message, state: FSMContext):
    code = message.text.strip().upper()
    user_id = message.from_user.id

    conn = await get_connection()
    try:
        async with conn.cursor(aiomysql.DictCursor) as cursor:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞
            await cursor.execute("SELECT reward FROM promo_codes WHERE code = %s", (code,))
            promo = await cursor.fetchone()
            if not promo:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥.")
                await state.clear()
                return
            reward = int(promo["reward"])

            # –ü—Ä–æ–≤–µ—Ä–∫–∞/—Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await cursor.execute("SELECT rank FROM users WHERE tg_id = %s", (user_id,))
            user = await cursor.fetchone()
            if not user:
                await cursor.execute("""
                    INSERT INTO users (tg_id, username, full_name, `rank`, balance)
                    VALUES (%s, %s, %s, '–ì–æ—Å—Ç—å', 0)
                """, (
                    user_id,
                    message.from_user.username or "-",
                    message.from_user.full_name or "-"
                ))
                user_rank = "–ì–æ—Å—Ç—å"
            else:
                user_rank = user["rank"]

            # –ü—Ä–æ–≤–µ—Ä–∫–∞: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–º–æ–∫–æ–¥
            await cursor.execute("SELECT 1 FROM promo_codes_usage WHERE tg_id = %s AND code = %s", (user_id, code))
            already_used = await cursor.fetchone()
            if already_used:
                await message.answer("‚ö†Ô∏è –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥.")
                await state.clear()
                return

            # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
            await cursor.execute(
                "INSERT INTO promo_codes_usage (tg_id, code) VALUES (%s, %s)", (user_id, code)
            )
            await cursor.execute(
                "UPDATE users SET balance = balance + %s WHERE tg_id = %s", (reward, user_id)
            )
            await conn.commit()

        await message.answer(f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward} üíé.")
        print(f"[PROMO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–º–æ–∫–æ–¥ '{code}' –∏ –ø–æ–ª—É—á–∏–ª {reward} üíé")
    except aiomysql.IntegrityError as e:
        # –ï—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω
        await message.answer("‚ö†Ô∏è –≠—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –±—ã–ª –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –≤–∞–º–∏.")
        print(f"[PROMO] –û—à–∏–±–∫–∞ IntegrityError –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: –ø—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω")
    except Exception as e:
        await message.answer(f"‚ùó –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        print("[PROMO ERROR]", e)
    finally:
        await state.clear()
        if inspect.isawaitable(safe_close(conn)):
            await safe_close(conn)
        else:
            safe_close(conn)
