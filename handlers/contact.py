import os
from aiogram import Router, F, types
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import get_connection

router = Router()
ADMIN_ID = 1016554091  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏

# –ì—Ä—É–ø–ø–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è –æ–±—Ä–∞—â–µ–Ω–∏—è
class ContactState(StatesGroup):
    waiting_for_message = State()

@router.message(F.text == "üì© –°–≤—è–∑—å")
async def contact_intro(message: Message, state: FSMContext):
    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è
    if message.from_user.id == ADMIN_ID:
        await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
        return
    await state.set_state(ContactState.waiting_for_message)
    await message.answer("‚úâÔ∏è –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    print(f"[CONTACT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –ø–µ—Ä–µ—à—ë–ª –≤ —Ä–µ–∂–∏–º –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è.")

@router.message(ContactState.waiting_for_message)
async def receive_contact_message(message: Message, state: FSMContext):
    conn = await get_connection()
    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ –±–∞–∑–µ
        async with conn.cursor() as cur:
            await cur.execute("SELECT * FROM users WHERE tg_id = %s", (message.from_user.id,))
            user = await cur.fetchone()
            if not user:
                await cur.execute(
                    "INSERT INTO users (tg_id, username, full_name, `rank`, balance) VALUES (%s, %s, %s, '–ì–æ—Å—Ç—å', 0)",
                    (message.from_user.id,
                     message.from_user.username or "-",
                     message.from_user.full_name or "-")
                )
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if message.content_type == 'text':
            content = message.text
            admin_forward = False
        elif message.content_type in ['photo', 'video', 'voice', 'audio', 'document']:
            # –ï—Å–ª–∏ –µ—Å—Ç—å caption ‚Äì –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ, –∏–Ω–∞—á–µ –≤—Å—Ç–∞–≤–ª—è–µ–º –∏–º—è —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            content = message.caption if message.caption else f"<{message.content_type}>"
            admin_forward = True
        else:
            content = f"<{message.content_type}>"
            admin_forward = False

        sender_name = f"@{message.from_user.username}" if message.from_user.username else (message.from_user.full_name or "-")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ (—Å UID)
        text = (f"üì© <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_name}</b>\n\n"
                f"{content}\n\n"
                f"<code>UID:{message.from_user.id}</code>")

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ —Ç–∞–±–ª–∏—Ü—É contacts
        async with conn.cursor() as cur:
            await cur.execute(
                "INSERT INTO contacts (tg_id, username, full_name, message, answered) VALUES (%s, %s, %s, %s, FALSE)",
                (message.from_user.id,
                 message.from_user.username or "-",
                 message.from_user.full_name or "-",
                 content)
            )
        await conn.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞ ‚Äì –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ,
        # –∏–Ω–∞—á–µ ‚Äì –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if admin_forward:
            forwarded = await message.bot.copy_message(
                chat_id=ADMIN_ID,
                from_chat_id=message.chat.id,
                message_id=message.message_id
            )
        else:
            forwarded = await message.bot.send_message(ADMIN_ID, text, parse_mode="HTML")
        await message.answer("üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        print(f"[CONTACT] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ (msg id: {forwarded.message_id}).")
    except Exception as e:
        print("[CONTACT ERROR]", e)
        await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    finally:
        await state.clear()
        if conn:
            await conn.close()
