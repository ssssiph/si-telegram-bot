import re
from aiogram import Router, F, types
from aiogram.types import Message
from database import get_connection

router = Router()

# –£–∫–∞–∂–∏—Ç–µ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = 1016554091

@router.message(F.text == "üì© –°–≤—è–∑—å")
async def contact_intro(message: Message):
    # –ó–∞–ø—Ä–µ—â–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π
    if message.from_user.id == ADMIN_ID:
        await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
        return
    await message.answer("‚úâÔ∏è –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    print(f"[CONTACT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –∫–æ–Ω—Ç–∞–∫—Ç.")

@router.message()
async def receive_contact_message(message: Message):
    # –≠—Ç–æ—Ç handler —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –Ω–µ —è–≤–ª—è—é—â–∏—Ö—Å—è reply, –æ—Ç –ù–ï –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if message.from_user.id == ADMIN_ID or message.reply_to_message is not None:
        return
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –æ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω
            await cur.execute("SELECT * FROM users WHERE tg_id = %s", (message.from_user.id,))
            user = await cur.fetchone()
            if not user:
                await cur.execute(
                    "INSERT INTO users (tg_id, username, full_name, `rank`, balance) VALUES (%s, %s, %s, '–ì–æ—Å—Ç—å', 0)",
                    (message.from_user.id, message.from_user.username or "-", message.from_user.full_name or "-")
                )
        sender_name = f"@{message.from_user.username}" if message.from_user.username else (message.from_user.full_name or "-")
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –¥–æ–ø–∏—Å—ã–≤–∞—è —Å–∫—Ä—ã—Ç—ã–π –º–∞—Ä–∫–µ—Ä —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        text = (
            f"üì© <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_name}</b>\n\n"
            f"{message.text}\n\n"
            f"<code>UID:{message.from_user.id}</code>"
        )
        sent_msg = await message.bot.send_message(ADMIN_ID, text, parse_mode="HTML")
        await message.answer("üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        print(f"[CONTACT] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ (msg id: {sent_msg.message_id}).")
    except Exception as e:
        print("[CONTACT ERROR]", e)
        await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    finally:
        conn.close()

# Handler, –∫–æ—Ç–æ—Ä—ã–π —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç (reply) –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–∞—Ä–∫–µ—Ä–æ–º
@router.message(lambda m: m.from_user.id == ADMIN_ID and m.reply_to_message is not None)
async def admin_reply_handler(message: Message):
    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥: –ø–µ—á–∞—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç
    reply_message = message.reply_to_message
    print("[DEBUG] admin_reply_handler triggered.")
    print("[DEBUG] Replied message text:", reply_message.text)
    print("[DEBUG] Replied message caption:", reply_message.caption)
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è (—Ç–µ–∫—Å—Ç –∏–ª–∏ caption)
    content = reply_message.text or reply_message.caption
    if not content:
        await message.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ—Ç–≤–µ—Ç–∞ (–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞/–æ–ø–∏—Å–∞–Ω–∏—è).")
        return

    # –ò—â–µ–º –º–∞—Ä–∫–µ—Ä –≤–∏–¥–∞ "UID:<—á–∏—Å–ª–æ>" –≤ —Å–æ–¥–µ—Ä–∂–∏–º–æ–º
    match = re.search(r"UID:(\d+)", content)
    if not match:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–∞—Ä–∫–µ—Ä <code>UID:...</code>.")
        return
    target_user_id = int(match.group(1))
    print(f"[DEBUG] –ò–∑–≤–ª–µ—á—ë–Ω target_user_id: {target_user_id}")

    # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä—Ç–æ—Ä–∞ —è–≤–ª—è–µ—Ç—Å—è —Ç–µ–∫—Å—Ç–æ–≤—ã–º, –∏—Å–ø–æ–ª—å–∑—É–µ–º send_message, –∏–Ω–∞—á–µ –ø—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å copy_message
    if message.text:
        try:
            await message.bot.send_message(target_user_id, f"üì® –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n{message.text}")
            print(f"[REPLY] –¢–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}.")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞: {e}")
            print("[REPLY ERROR]", e)
    else:
        try:
            await message.bot.copy_message(chat_id=target_user_id, from_chat_id=ADMIN_ID, message_id=message.message_id)
            print(f"[REPLY] –û—Ç–≤–µ—Ç (copy_message) –æ—Ç {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}.")
        except Exception as e:
            await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            print("[REPLY ERROR]", e)
    await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
