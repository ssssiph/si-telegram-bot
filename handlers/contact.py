import re
from aiogram import Router, F, types
from aiogram.types import Message
from database import get_connection

router = Router()

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–¥–∏—Ä–µ–∫—Ç–æ—Ä–∞)
ADMIN_ID = 1016554091

@router.message(F.text == "üì© –°–≤—è–∑—å")
async def contact_intro(message: Message):
    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é
    if message.from_user.id == ADMIN_ID:
        await message.answer("–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –Ω–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É —Ñ—É–Ω–∫—Ü–∏—é.")
        return
    await message.answer("‚úâÔ∏è –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    print(f"[CONTACT] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –∫–æ–Ω—Ç–∞–∫—Ç.")

@router.message()
async def receive_contact_message(message: Message):
    # –≠—Ç–æ—Ç handler —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ù–ï —è–≤–ª—è–µ—Ç—Å—è reply –∏ –Ω–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if message.from_user.id == ADMIN_ID or message.reply_to_message is not None:
        return
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º
            await cur.execute("SELECT * FROM users WHERE tg_id = %s", (message.from_user.id,))
            user = await cur.fetchone()
            if not user:
                await cur.execute(
                    """INSERT INTO users (tg_id, username, full_name, `rank`, balance)
                    VALUES (%s, %s, %s, '–ì–æ—Å—Ç—å', 0)""",
                    (message.from_user.id,
                     message.from_user.username or "-",
                     message.from_user.full_name or "-")
                )
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
        sender_name = (f"@{message.from_user.username}"
                       if message.from_user.username
                       else (message.from_user.full_name or "-"))
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä–∫–µ—Ä —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–Ω –±—É–¥–µ—Ç –≤–∏–¥–µ–Ω –≤ –≤–∏–¥–µ –º–æ–Ω–æ—à–∏—Ä–∏–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞)
        text = (f"üì© <b>–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_name}</b>\n\n"
                f"{message.text}\n\n"
                f"<code>UID:{message.from_user.id}</code>")
        sent_msg = await message.bot.send_message(ADMIN_ID, text, parse_mode="HTML")
        await message.answer("üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        print(f"[CONTACT] –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ (msg id {sent_msg.message_id}).")
    except Exception as e:
        print("[CONTACT ERROR]", e)
        await message.answer("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
    finally:
        conn.close()

@router.message(lambda m: m.from_user.id == ADMIN_ID and m.reply_to_message is not None)
async def admin_reply_handler(message: Message):
    """
    –≠—Ç–æ—Ç handler —Å—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç, –∫–æ–≥–¥–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç (reply) –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ,
    —Å–æ–¥–µ—Ä–∂–∞—â–µ–µ –º–∞—Ä–∫–µ—Ä —Å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏ –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º –æ—Ç–≤–µ—Ç.
    """
    if not message.reply_to_message.text:
        await message.answer("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –æ—Ç–≤–µ—Ç–∞.")
        return

    # –ò—â–µ–º –º–∞—Ä–∫–µ—Ä –≤–∏–¥–∞ "UID:<—á–∏—Å–ª–æ>" –≤ —Ç–µ–∫—Å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏
    match = re.search(r"UID:(\d+)", message.reply_to_message.text)
    if not match:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è.")
        return

    target_user_id = int(match.group(1))
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º copy_message –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–∏–ø–∞ (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ –∏ —Ç.–¥.)
        await message.bot.copy_message(
            chat_id=target_user_id,
            from_chat_id=ADMIN_ID,
            message_id=message.message_id
        )
        await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        print(f"[REPLY] –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: {e}")
        print("[REPLY ERROR]", e)
