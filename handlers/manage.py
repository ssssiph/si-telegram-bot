import os
import json
from aiogram import Router, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiomysql import DictCursor
from database import get_connection

router = Router()

ADMIN_ID = 1016554091
PUBLISH_CHANNEL_ID = -1002292957980

async def safe_close(conn):
    if conn:
        try:
            ret = conn.close()
            if ret is not None and hasattr(ret, '__await__'):
                await ret
        except Exception as ex:
            print("safe_close error:", ex)
# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
class BroadcastState(StatesGroup):
    waiting_for_broadcast_message = State()

class ContactReplyState(StatesGroup):
    waiting_for_reply = State()

class EventCreation(StatesGroup):
    waiting_for_title = State()
    waiting_for_datetime = State()
    waiting_for_description = State()
    waiting_for_prize = State()
    waiting_for_media = State()

class EventEditState(StatesGroup):
    waiting_for_edit_details = State()

class UserEditState(StatesGroup):
    waiting_for_new_rank = State()

class DiamondsState(StatesGroup):
    waiting_for_amount = State()

class PromoCreateState(StatesGroup):
    waiting_for_code_and_reward = State()

async def is_user_blocked(user_id: int) -> bool:
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("SELECT blocked FROM users WHERE tg_id = %s", (user_id,))
            result = await cur.fetchone()
            return bool(result[0]) if result is not None else False
    except Exception as e:
        print("Error in is_user_blocked:", e)
        return False
    finally:
        await safe_close(conn)
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π (–¥–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö —Ä–∞–Ω–≥ –Ω–µ "–≥–æ—Å—Ç—å")
@router.message(lambda m: m.chat.type == "private" and m.from_user.id != ADMIN_ID)
async def handle_incoming_contact(m: Message, state: FSMContext):
    if await state.get_state() is not None:
        return
    if await is_user_blocked(m.from_user.id):
        await m.answer("üö´ –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ.")
        return
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("SELECT `rank` FROM users WHERE tg_id = %s", (m.from_user.id,))
            result = await cur.fetchone()
        if result is None or result[0].lower() == "–≥–æ—Å—Ç—å":
            await m.answer("üö´ –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ.")
            return
        sender_info = f"{m.from_user.full_name} (@{m.from_user.username})" if m.from_user.username else m.from_user.full_name
        content = m.text if m.content_type == "text" else f"[–ú–µ–¥–∏–∞: {m.content_type}]\n–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_info}"
        async with conn.cursor() as cur:
            await cur.execute("INSERT INTO contacts (tg_id, full_name, username, message, answered) VALUES (%s, %s, %s, %s, %s)",
                              (m.from_user.id, m.from_user.full_name, m.from_user.username, content, False))
            await conn.commit()
        await m.answer("–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ.")
    except Exception as e:
        await m.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è.")
        print("Error in handle_incoming_contact:", e)
    finally:
        conn.close()

@router.message(lambda message: message.text and message.text.strip().lower() == "‚öôÔ∏è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
async def admin_panel(message: Message, state: FSMContext):
    await state.clear()
    print("[Admin] –ó–∞–ø—É—Å–∫ –ø–∞–Ω–µ–ª–∏ –¥–ª—è", message.from_user.id)
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("SELECT `rank` FROM users WHERE tg_id = %s", (message.from_user.id,))
            result = await cur.fetchone()
            if not result:
                await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return
            user_rank = result[0]
        if user_rank.lower() != "–≥–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä":
            await message.answer("üö´ –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ.")
            return
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì• –û–±—Ä–∞—â–µ–Ω–∏—è", callback_data="admin_contacts_list")],
            [InlineKeyboardButton(text="üìÖ –°–æ–±—ã—Ç–∏—è", callback_data="admin_events_list")],
            [InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users_list")],
            [InlineKeyboardButton(text="üé´ –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="create_promo")],
            [InlineKeyboardButton(text="üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="admin_broadcast")]
        ])
        await message.answer("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=kb)
        print("[Admin] –ú–µ–Ω—é –≤—ã–≤–µ–¥–µ–Ω–æ")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:\n<code>{e}</code>")
        print("[Admin ERROR]", e)
    finally:
        await safe_close(conn)
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ (–∞–¥–º–∏–Ω)
@router.callback_query(lambda q: q.data == "create_promo")
async def create_promo_callback(query: types.CallbackQuery, state: FSMContext):
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("SELECT `rank` FROM users WHERE tg_id = %s", (query.from_user.id,))
            res = await cur.fetchone()
        if not res or res[0].lower() != "–≥–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä":
            await query.message.answer("üö´ –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ.")
            return
    except Exception as e:
        print("Error in create_promo_callback (rank check):", e)
        await query.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞.")
        return
    finally:
        await safe_close(conn)
    promo_list = ""
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("SELECT code, reward FROM promo_codes")
            rows = await cur.fetchall()
        if rows:
            promo_list = "\n".join([f"{row[0]} | {row[1]}" for row in rows])
        else:
            promo_list = "–ù–µ—Ç –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤."
    except Exception as e:
        promo_list = "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤."
        print("[Promo ERROR] –ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤:", e)
    finally:
        conn.close()
    text = (
        "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –Ω–∞–≥—Ä–∞–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "–ù–∞–∑–≤–∞–Ω–∏–µ | –ù–∞–≥—Ä–∞–¥–∞\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: NEWYEAR2025 | 100\n\n"
        "–¢–µ–∫—É—â–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n" + promo_list
    )
    await query.message.answer(text)
    await state.set_state(PromoCreateState.waiting_for_code_and_reward)
    await query.answer("–û–∂–∏–¥–∞–µ—Ç—Å—è –≤–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–∞.")

@router.message(PromoCreateState.waiting_for_code_and_reward)
async def process_create_promo(message: Message, state: FSMContext):
    parts = [s.strip() for s in message.text.split("|")]
    if len(parts) != 2:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ | –ù–∞–≥—Ä–∞–¥–∞")
        return
    code, reward_str = parts
    try:
        reward = int(reward_str)
    except ValueError:
        await message.answer("–ù–∞–≥—Ä–∞–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")
        return
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("INSERT INTO promo_codes (code, reward) VALUES (%s, %s)", (code, reward))
            await conn.commit()
        await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ '{code}' —Å –Ω–∞–≥—Ä–∞–¥–æ–π {reward} üíé —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        print("[Promo ERROR]", e)
    finally:
        await state.clear()
        conn.close()
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.callback_query(lambda q: q.data == "admin_contacts_list")
async def admin_contacts_list_callback(query: types.CallbackQuery, state: FSMContext):
    await send_contacts_list_to_admin(query.message, state)
    await query.answer()

@router.callback_query(lambda q: q.data and q.data.startswith("contact_reply:"))
async def contact_reply_select(query: types.CallbackQuery, state: FSMContext):
    cid_str = query.data.split(":", 1)[1]
    try:
        cid = int(cid_str)
    except ValueError:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    await state.update_data(contact_reply_id=cid)
    conn = await get_connection()
    try:
        async with conn.cursor(DictCursor) as cur:
            await cur.execute("SELECT * FROM contacts WHERE id = %s", (cid,))
            contact = await cur.fetchone()
        if contact:
            original_text = contact.get("message") or "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è."
            await query.message.answer(f"üì® –ò—Å—Ö–æ–¥–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ:\n\n{original_text}\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")
        else:
            await query.message.answer("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        await query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è: <code>{e}</code>")
        print("[Contacts ERROR]", e)
    finally:
        await safe_close(conn)
    await state.set_state(ContactReplyState.waiting_for_reply)
    await query.answer("–û–∂–∏–¥–∞–µ—Ç—Å—è –≤–∞—à –æ—Ç–≤–µ—Ç.")

@router.message(ContactReplyState.waiting_for_reply)
async def process_contact_reply(message: Message, state: FSMContext):
    data = await state.get_data()
    cid = data.get("contact_reply_id")
    if not cid:
        await message.answer("–û—à–∏–±–∫–∞: –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ.")
        await state.clear()
        return
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("UPDATE contacts SET answered = TRUE WHERE id = %s", (cid,))
            await conn.commit()
        async with conn.cursor(DictCursor) as cur:
            await cur.execute("SELECT * FROM contacts WHERE id = %s", (cid,))
            contact = await cur.fetchone()
        if not contact:
            await message.answer("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await state.clear()
            return
        target_id = contact.get("tg_id")
        if not target_id:
            await message.answer("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç tg_id.")
            await state.clear()
            return
        original_text = contact.get("message") or "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è."
        author_info = f"{contact.get('full_name','-')}" + (f" (@{contact.get('username','-')})" if contact.get("username") else "")
        header = f"–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç {author_info}:\n\n{original_text}\n\n–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:"
        if message.content_type == "text":
            await message.bot.send_message(target_id, header + "\n\n" + message.text)
        else:
            await message.bot.send_message(target_id, header + "\n\n–û—Ç–≤–µ—Ç –Ω–∏–∂–µ:")
            await message.bot.copy_message(chat_id=target_id, from_chat_id=message.chat.id, message_id=message.message_id)
        await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: <code>{e}</code>")
        print("[Contacts ERROR –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ]", e)
    finally:
        await state.clear()
        await safe_close(conn)
        await send_contacts_list_to_admin(message, state)

async def send_contacts_list_to_admin(dest_message: Message, state: FSMContext):
    print("[Contacts] –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π")
    conn = await get_connection()
    try:
        data = await state.get_data()
        page = data.get("contacts_page", 1)
        per_page = 9
        offset = (page - 1) * per_page
        async with conn.cursor(DictCursor) as cur:
            await cur.execute("SELECT * FROM contacts WHERE answered = FALSE ORDER BY created_at DESC LIMIT %s OFFSET %s", (per_page, offset))
            contacts = await cur.fetchall()
        if not contacts:
            await dest_message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.")
            return
        buttons = []
        for contact in contacts:
            cid = contact.get("id")
            full_name = contact.get("full_name") or "-"
            username = contact.get("username") or "-"
            created_at = contact.get("created_at")
            date_str = str(created_at) if created_at else ""
            btn_text = f"{full_name} (@{username} | {cid}) {date_str}"
            buttons.append([InlineKeyboardButton(text=btn_text, callback_data=f"contact_reply:{cid}")])
        if len(contacts) == per_page:
            buttons.append([InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="contacts_page:next")])
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        await dest_message.answer("–û–±—Ä–∞—â–µ–Ω–∏—è:", reply_markup=kb)
        print("[Contacts] –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        await dest_message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π: <code>{e}</code>")
        print("[Contacts ERROR]", e)
    finally:
        await safe_close(conn)

@router.callback_query(lambda q: q.data == "admin_broadcast")
async def broadcast_init(query: types.CallbackQuery, state: FSMContext):
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è:")
    await state.set_state(BroadcastState.waiting_for_broadcast_message)
    await query.answer("–û–∂–∏–¥–∞–µ—Ç—Å—è —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è.")

@router.message(BroadcastState.waiting_for_broadcast_message)
async def process_broadcast(message: Message, state: FSMContext):
    broadcast_text = message.text
    conn = await get_connection()
    try:
        async with conn.cursor(DictCursor) as cur:
            await cur.execute("SELECT tg_id FROM users")
            users = await cur.fetchall()
        for user in users:
            try:
                await message.bot.send_message(user['tg_id'], broadcast_text)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['tg_id']}: {e}")
        await message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
    finally:
        await state.clear()
        await safe_close(conn)
