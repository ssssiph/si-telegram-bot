import aiomysql
from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from keyboards import back_menu
from database import get_connection

router = Router()

class EventCreation(StatesGroup):
    title = State()
    description = State()
    prize = State()
    datetime = State()
    media = State()

# üõ† –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@router.message(F.text == "üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
async def admin_panel(message: Message):
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("SELECT `rank` FROM users WHERE tg_id = %s", (message.from_user.id,))
            result = await cur.fetchone()

            if not result:
                await cur.execute("""
                    INSERT INTO users (tg_id, username, full_name, `rank`, balance)
                    VALUES (%s, %s, %s, '–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä', 0)
                """, (
                    message.from_user.id,
                    message.from_user.username or "-",
                    message.from_user.full_name or "-"
                ))
                rank = '–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä'
            else:
                rank = result[0]

            # üîé –ü–æ–∫–∞–∂–µ–º —Ä–∞–Ω–≥ –≤ —á–∞—Ç–µ (–æ—Ç–ª–∞–¥–∫–∞)
            await message.answer(f"üîç –í–∞—à —Ä–∞–Ω–≥: <b>{rank}</b>")

            # üõ° –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤
            if rank != "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä":
                await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é.")
                return

            # ‚úÖ –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            await message.answer(
                "üõ† –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:\n\n"
                "1Ô∏è‚É£ –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ\n"
                "2Ô∏è‚É£ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å/–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ\n"
                "3Ô∏è‚É£ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏\n"
                "0Ô∏è‚É£ –ù–∞–∑–∞–¥",
                reply_markup=back_menu
            )
    finally:
        conn.close()


# üìã –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
@router.message(F.text == "1Ô∏è‚É£")
async def create_event_start(message: Message, state: FSMContext):
    await message.answer("‚úçÔ∏è –í–≤–µ–¥–∏—Ç–µ <b>–Ω–∞–∑–≤–∞–Ω–∏–µ</b> —Å–æ–±—ã—Ç–∏—è:", reply_markup=ReplyKeyboardRemove())
    await state.set_state(EventCreation.title)

@router.message(EventCreation.title)
async def set_title(message: Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("üìù –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ <b>–æ–ø–∏—Å–∞–Ω–∏–µ</b> —Å–æ–±—ã—Ç–∏—è:")
    await state.set_state(EventCreation.description)

@router.message(EventCreation.description)
async def set_description(message: Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("üèÜ –£–∫–∞–∂–∏—Ç–µ <b>–ø—Ä–∏–∑</b> —Å–æ–±—ã—Ç–∏—è:")
    await state.set_state(EventCreation.prize)

@router.message(EventCreation.prize)
async def set_prize(message: Message, state: FSMContext):
    await state.update_data(prize=message.text)
    await message.answer("üìÖ –í–≤–µ–¥–∏—Ç–µ <b>–¥–∞—Ç—É –∏ –≤—Ä–µ–º—è</b> —Å–æ–±—ã—Ç–∏—è:")
    await state.set_state(EventCreation.datetime)

@router.message(EventCreation.datetime)
async def set_datetime(message: Message, state: FSMContext):
    await state.update_data(datetime=message.text)
    await message.answer("üñº –ü—Ä–∏—à–ª–∏—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ/–≤–∏–¥–µ–æ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ ¬´-¬ª, –µ—Å–ª–∏ –Ω–µ –Ω—É–∂–Ω–æ:")
    await state.set_state(EventCreation.media)

@router.message(EventCreation.media)
async def finish_event(message: Message, state: FSMContext):
    data = await state.get_data()
    media = None
    if message.photo:
        media = message.photo[-1].file_id
    elif message.video:
        media = message.video.file_id
    elif message.text.strip() != "-":
        media = message.text.strip()

    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("""
                INSERT INTO events (title, description, prize, datetime, media, creator_id)
                VALUES (%s, %s, %s, %s, %s, %s)
            """, (
                data["title"],
                data["description"],
                data["prize"],
                data["datetime"],
                media,
                message.from_user.id
            ))
        await message.answer("‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", reply_markup=back_menu)
    finally:
        conn.close()
    await state.clear()
