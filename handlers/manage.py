import os
import json
import re
from aiogram import Router, F, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State  # –¥–ª—è aiogram v3.x
from aiomysql import DictCursor  # –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
from database import get_connection

router = Router()
ADMIN_ID = 1016554094  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è,
# –Ω–∞–ø—Ä–∏–º–µ—Ä: "-1001234567890,-1009876543210"
channels_raw = os.getenv("CHANNEL_IDS", "")
CHANNEL_IDS = [int(ch.strip()) for ch in channels_raw.split(",") if ch.strip()]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
async def safe_close(conn):
    if conn:
        try:
            ret = conn.close()
            if ret is not None and hasattr(ret, '__await__'):
                await ret
        except Exception as ex:
            print("safe_close error:", ex)
            pass

# =========================================  
#         –ì–õ–ê–í–ù–ê–Ø –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨  
# =========================================  

@router.message(lambda message: message.text and message.text.strip() == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
async def admin_panel(message: Message, state: FSMContext):
    print("[Admin] –ó–∞–ø—É—Å–∫ –ø–∞–Ω–µ–ª–∏ –¥–ª—è", message.from_user.id)
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("SELECT `rank` FROM users WHERE tg_id = %s", (message.from_user.id,))
            result = await cur.fetchone()
            if not result:
                await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return
            user_rank = result[0]
        if user_rank != "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä":
            await message.answer("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ.")
            return
        # –§–æ—Ä–º–∏—Ä—É–µ–º –º–µ–Ω—é —Ä–∞–∑–¥–µ–ª–æ–≤
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û–±—Ä–∞—â–µ–Ω–∏—è", callback_data="admin_contacts_list")],
            [InlineKeyboardButton(text="–°–æ–±—ã—Ç–∏—è", callback_data="admin_events_list")],
            [InlineKeyboardButton(text="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users_list")],
            [InlineKeyboardButton(text="–û–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="admin_broadcast")]
        ])
        await message.answer("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=kb)
        print("[Admin] –ú–µ–Ω—é –≤—ã–≤–µ–¥–µ–Ω–æ")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω–∫–µ:\n<code>{e}</code>")
        print("[Admin ERROR]", e)
    finally:
        await safe_close(conn)

# =========================================  
#          –†–ê–ó–î–ï–õ "–û–ë–†–ê–©–ï–ù–ò–Ø"  
# =========================================  

async def send_contacts_list_to_admin(dest_message: Message, state: FSMContext):
    print("[–û–±—Ä–∞—â–µ–Ω–∏—è] –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π")
    conn = await get_connection()
    try:
        data = await state.get_data()
        page = data.get("contacts_page", 1)
        per_page = 9
        offset = (page - 1) * per_page
        async with conn.cursor(DictCursor) as cur:
            await cur.execute(
                "SELECT * FROM contacts WHERE answered = FALSE ORDER BY created_at DESC LIMIT %s OFFSET %s",
                (per_page, offset)
            )
            contacts = await cur.fetchall()
        if not contacts:
            await dest_message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.")
            return
        buttons = []
        for contact in contacts:
            full_name = (contact.get("full_name") or "-").strip()
            username = f"@{contact.get('username')}" if contact.get("username") and contact.get("username").strip() else "-"
            cid = contact.get("id")
            created_at = contact.get("created_at")
            date_str = str(created_at) if created_at else ""
            btn_text = f"{full_name} ({username} | {cid}) {date_str}"
            buttons.append([InlineKeyboardButton(text=btn_text, callback_data=f"contact_reply:{cid}")])
        if len(contacts) == per_page:
            buttons.append([InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="contacts_page:next")])
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        await dest_message.answer("–°–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π:", reply_markup=kb)
        print("[–û–±—Ä–∞—â–µ–Ω–∏—è] –°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        await dest_message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π: <code>{e}</code>")
        print("[–û–±—Ä–∞—â–µ–Ω–∏—è ERROR]", e)
    finally:
        await safe_close(conn)

@router.callback_query(lambda q: q.data == "admin_contacts_list")
async def admin_contacts_list_callback(query: types.CallbackQuery, state: FSMContext):
    print("[–û–±—Ä–∞—â–µ–Ω–∏—è] –ö–Ω–æ–ø–∫–∞ '–û–±—Ä–∞—â–µ–Ω–∏—è' –Ω–∞–∂–∞—Ç–∞")
    await send_contacts_list_to_admin(query.message, state)
    await query.answer()

@router.callback_query(lambda q: q.data and q.data.startswith("contacts_page:"))
async def contacts_page_nav(query: types.CallbackQuery, state: FSMContext):
    direction = query.data.split(":", 1)[1]
    data = await state.get_data()
    page = data.get("contacts_page", 1)
    if direction == "next":
        page += 1
    else:
        page = max(1, page - 1)
    await state.update_data(contacts_page=page)
    await send_contacts_list_to_admin(query.message, state)
    await query.answer()

@router.callback_query(lambda q: q.data and q.data.startswith("contact_reply:"))
async def contact_reply_select(query: types.CallbackQuery, state: FSMContext):
    cid_str = query.data.split(":", 1)[1]
    try:
        cid = int(cid_str)
    except ValueError:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    await state.update_data(contact_reply_id=cid)
    print(f"[–û–±—Ä–∞—â–µ–Ω–∏—è] –í—ã–±—Ä–∞–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{cid} –¥–ª—è –æ—Ç–≤–µ—Ç–∞")
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è:")
    await query.answer("–û–∂–∏–¥–∞–µ—Ç—Å—è –≤–∞—à –æ—Ç–≤–µ—Ç.")

@router.message(lambda m: m.from_user.id == ADMIN_ID)
async def process_contact_reply(message: Message, state: FSMContext):
    data = await state.get_data()
    if not data.get("contact_reply_id"):
        print("[–û–±—Ä–∞—â–µ–Ω–∏—è] –ù–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è.")
        return
    cid = data["contact_reply_id"]
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("UPDATE contacts SET answered = TRUE WHERE id = %s", (cid,))
            await conn.commit()
        async with conn.cursor(DictCursor) as cur:
            await cur.execute("SELECT * FROM contacts WHERE id = %s", (cid,))
            contact = await cur.fetchone()
        if not contact:
            await message.answer("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await state.clear()
            return
        user_id = contact.get("tg_id")
        if not user_id:
            await message.answer("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç tg_id –≤ –æ–±—Ä–∞—â–µ–Ω–∏–∏.")
            return
        print(f"[–û–±—Ä–∞—â–µ–Ω–∏—è] –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        if message.content_type == 'text':
            await message.bot.send_message(user_id, f"üì® –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n{message.text}")
        else:
            await message.bot.copy_message(
                chat_id=user_id,
                from_chat_id=message.chat.id,
                message_id=message.message_id
            )
        await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        await send_contacts_list_to_admin(message, state)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: <code>{e}</code>")
        print("[–û–±—Ä–∞—â–µ–Ω–∏—è ERROR –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ]", e)
    finally:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
        curr = await state.get_data()
        new_state = {}
        if curr.get("contacts_page"):
            new_state["contacts_page"] = curr["contacts_page"]
        await state.set_data(new_state)
        await safe_close(conn)

# =========================================  
#             –†–ê–ó–î–ï–õ "–°–û–ë–´–¢–ò–Ø"  
# =========================================  

# FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è ‚Äì –¥–æ–±–∞–≤–ª–µ–Ω —à–∞–≥ –¥–ª—è media (—Ñ–æ—Ç–æ/–≥–æ–ª–æ—Å–æ–≤–æ–µ)
class EventCreation(StatesGroup):
    waiting_for_title = State()
    waiting_for_datetime = State()
    waiting_for_description = State()
    waiting_for_prize = State()
    waiting_for_media = State()  # –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

@router.callback_query(lambda q: q.data == "event_create")
async def event_create_callback(query: types.CallbackQuery, state: FSMContext):
    print("[–°–æ–±—ã—Ç–∏—è] –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è")
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
    await EventCreation.waiting_for_title.set()
    await query.answer()

@router.message(EventCreation.waiting_for_title)
async def process_event_title(message: Message, state: FSMContext):
    await state.update_data(event_title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è:")
    await EventCreation.next()
    print("[–°–æ–±—ã—Ç–∏—è] –ù–∞–∑–≤–∞–Ω–∏–µ:", message.text)

@router.message(EventCreation.waiting_for_datetime)
async def process_event_datetime(message: Message, state: FSMContext):
    await state.update_data(event_datetime=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
    await EventCreation.next()
    print("[–°–æ–±—ã—Ç–∏—è] –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:", message.text)

@router.message(EventCreation.waiting_for_description)
async def process_event_description(message: Message, state: FSMContext):
    await state.update_data(event_description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–∑ (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º):")
    await EventCreation.next()
    print("[–°–æ–±—ã—Ç–∏—è] –û–ø–∏—Å–∞–Ω–∏–µ:", message.text)

@router.message(EventCreation.waiting_for_prize)
async def process_event_prize(message: Message, state: FSMContext):
    await state.update_data(event_prize=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ 'skip':")
    await EventCreation.next()
    print("[–°–æ–±—ã—Ç–∏—è] –ü—Ä–∏–∑:", message.text)

@router.message(EventCreation.waiting_for_media)
async def process_event_media(message: Message, state: FSMContext):
    # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –≤–≤—ë–ª 'skip' –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å—á–∏—Ç–∞–µ–º media –ø—É—Å—Ç–æ–π
    media = ""
    if message.text and message.text.lower() == "skip":
        media = ""
    else:
        # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ–æ—Ç–æ, –≤–æ–∑—å–º–µ–º file_id –ø–µ—Ä–≤–æ–≥–æ —Ñ–æ—Ç–æ; –µ—Å–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ ‚Äì file_id
        if message.photo:
            media = message.photo[-1].file_id
        elif message.voice:
            media = message.voice.file_id
        else:
            media = ""  # –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å –Ω–∞ –¥—Ä—É–≥–∏–µ —Ç–∏–ø—ã
    data = await state.get_data()
    title = data.get("event_title")
    datetime_str = data.get("event_datetime")
    description = data.get("event_description")
    prize = data.get("event_prize")
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            # –í—Å—Ç–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ; –ø–æ–ª–µ published —Ö—Ä–∞–Ω–∏—Ç JSON (–Ω–∞—á–∞–ª—å–Ω–æ–µ "{}")
            await cur.execute(
                "INSERT INTO events (title, description, prize, datetime, media, creator_id, published) VALUES (%s, %s, %s, %s, %s, %s, %s)",
                (title, description, prize, datetime_str, media, message.from_user.id, "{}")
            )
            await conn.commit()
            event_id = cur.lastrowid
        # –í—ã–≤–æ–¥–∏–º –º–µ–Ω—é –¥–ª—è —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data=f"event_publish:{event_id}")],
            [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data=f"event_edit:{event_id}")],
            [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data=f"event_delete:{event_id}")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_events_list")]
        ])
        await message.answer(f"–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å ID: {event_id}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
        print("[–°–æ–±—ã—Ç–∏—è] –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ, ID:", event_id)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: <code>{e}</code>")
        print("[–°–æ–±—ã—Ç–∏—è ERROR]", e)
    finally:
        await state.clear()
        await safe_close(conn)

@router.callback_query(lambda q: q.data == "admin_events_list")
async def admin_events_list_callback(query: types.CallbackQuery, state: FSMContext):
    await send_events_list_to_admin(query.message, state)
    await query.answer()

async def send_events_list_to_admin(dest_message: Message, state: FSMContext):
    print("[–°–æ–±—ã—Ç–∏—è] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π")
    conn = await get_connection()
    try:
        data = await state.get_data()
        page = data.get("events_page", 1)
        per_page = 9
        offset = (page - 1) * per_page
        async with conn.cursor(DictCursor) as cur:
            await cur.execute(
                "SELECT * FROM events ORDER BY datetime DESC LIMIT %s OFFSET %s",
                (per_page, offset)
            )
            events = await cur.fetchall()
        buttons = []
        buttons.append([InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="event_create")])
        if events:
            for event in events:
                title = event.get("title") or "-"
                datetime_str = event.get("datetime") or "-"
                eid = event.get("id")
                btn_text = f"{title} | {datetime_str}"
                buttons.append([InlineKeyboardButton(text=btn_text, callback_data=f"event_edit:{eid}")])
            if len(events) == per_page:
                buttons.append([InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="events_page:next")])
        else:
            buttons.append([InlineKeyboardButton(text="–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π", callback_data="none")])
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        await dest_message.answer("–°–æ–±—ã—Ç–∏—è:", reply_markup=kb)
        print("[–°–æ–±—ã—Ç–∏—è] –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        await dest_message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π: <code>{e}</code>")
        print("[–°–æ–±—ã—Ç–∏—è ERROR –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏]", e)
    finally:
        await safe_close(conn)

@router.callback_query(lambda q: q.data and q.data.startswith("events_page:"))
async def events_page_nav(query: types.CallbackQuery, state: FSMContext):
    direction = query.data.split(":", 1)[1]
    data = await state.get_data()
    page = data.get("events_page", 1)
    if direction == "next":
        page += 1
    else:
        page = max(1, page - 1)
    await state.update_data(events_page=page)
    await send_events_list_to_admin(query.message, state)
    await query.answer()

@router.callback_query(lambda q: q.data and q.data.startswith("event_publish:"))
async def event_publish_callback(query: types.CallbackQuery, state: FSMContext):
    eid_str = query.data.split(":", 1)[1]
    try:
        eid = int(eid_str)
    except ValueError:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    conn = await get_connection()
    try:
        async with conn.cursor(DictCursor) as cur:
            await cur.execute("SELECT * FROM events WHERE id = %s", (eid,))
            event = await cur.fetchone()
        if not event:
            await query.message.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        publish_text = (
            f"üì¢ –°–æ–±—ã—Ç–∏–µ!\n\n–ù–∞–∑–≤–∞–Ω–∏–µ: {event.get('title')}\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {event.get('datetime')}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {event.get('description')}\n–ü—Ä–∏–∑: {event.get('prize')}"
        )
        # –ï—Å–ª–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏—è –∑–∞–¥–∞–Ω media, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–ø—Ü–∏—é: –Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å –µ–≥–æ
        if event.get("media"):
            publish_text += f"\n(–ú–µ–¥–∏–∞: {event.get('media')})"
        published = {}
        for ch in CHANNEL_IDS:
            try:
                sent = await query.bot.send_message(ch, publish_text)
                published[str(ch)] = sent.message_id
            except Exception as pub_e:
                print(f"[–°–æ–±—ã—Ç–∏—è] –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ {ch}: {pub_e}")
        async with conn.cursor() as cur:
            await cur.execute("UPDATE events SET published = %s WHERE id = %s", (json.dumps(published), eid))
            await conn.commit()
        await query.message.answer("–°–æ–±—ã—Ç–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö.")
        print(f"[–°–æ–±—ã—Ç–∏—è] –°–æ–±—ã—Ç–∏–µ {eid} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:", published)
    except Exception as e:
        await query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è: <code>{e}</code>")
        print("[–°–æ–±—ã—Ç–∏—è ERROR –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏]", e)
    finally:
        await safe_close(conn)
        await query.answer()

@router.callback_query(lambda q: q.data and q.data.startswith("event_edit:"))
async def event_edit_callback(query: types.CallbackQuery, state: FSMContext):
    eid_str = query.data.split(":", 1)[1]
    try:
        eid = int(eid_str)
    except ValueError:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    await query.message.answer(f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è {eid} –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ.")
    await query.answer()

@router.callback_query(lambda q: q.data and q.data.startswith("event_delete:"))
async def event_delete_callback(query: types.CallbackQuery, state: FSMContext):
    eid_str = query.data.split(":", 1)[1]
    try:
        eid = int(eid_str)
    except ValueError:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("DELETE FROM events WHERE id = %s", (eid,))
            await conn.commit()
        await query.message.answer("–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
        print(f"[–°–æ–±—ã—Ç–∏—è] –°–æ–±—ã—Ç–∏–µ {eid} —É–¥–∞–ª–µ–Ω–æ")
    except Exception as e:
        await query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: <code>{e}</code>")
        print("[–°–æ–±—ã—Ç–∏—è ERROR –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏]", e)
    finally:
        await safe_close(conn)
        await query.answer()

# =========================================  
#            –†–ê–ó–î–ï–õ "–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–ò"  
# =========================================  

async def send_users_list_to_admin(dest_message: Message, state: FSMContext):
    print("[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    conn = await get_connection()
    try:
        data = await state.get_data()
        page = data.get("users_page", 1)
        per_page = 9
        offset = (page - 1) * per_page
        async with conn.cursor(DictCursor) as cur:
            await cur.execute("SELECT * FROM users ORDER BY tg_id LIMIT %s OFFSET %s", (per_page, offset))
            users = await cur.fetchall()
        if not users:
            await dest_message.answer("–ù–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        buttons = []
        for user in users:
            full_name = (user.get("full_name") or "-").strip()
            username = f"@{user.get('username')}" if user.get("username") and user.get("username").strip() else "-"
            tg_id = user.get("tg_id")
            rank = user.get("rank") or "-"
            balance = user.get("balance") or 0
            prefix = "‚ùå" if user.get("blocked") else ""
            btn_text = f"{prefix}{full_name} ({username} | {tg_id}) –†–∞–Ω–≥: {rank} –ë–∞–ª–∞–Ω—Å: {balance}"
            buttons.append([InlineKeyboardButton(text=btn_text, callback_data=f"user_manage:{tg_id}")])
        if len(users) == per_page:
            buttons.append([InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="users_page:next")])
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        await dest_message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:", reply_markup=kb)
        print("[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏] –°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        await dest_message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{e}</code>")
        print("[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ERROR]", e)
    finally:
        await safe_close(conn)

@router.callback_query(lambda q: q.data == "admin_users_list")
async def admin_users_list_callback(query: types.CallbackQuery, state: FSMContext):
    await send_users_list_to_admin(query.message, state)
    await query.answer()

@router.callback_query(lambda q: q.data and q.data.startswith("users_page:"))
async def users_page_nav(query: types.CallbackQuery, state: FSMContext):
    direction = query.data.split(":", 1)[1]
    data = await state.get_data()
    page = data.get("users_page", 1)
    if direction == "next":
        page += 1
    else:
        page = max(1, page - 1)
    await state.update_data(users_page=page)
    await send_users_list_to_admin(query.message, state)
    await query.answer()

@router.callback_query(lambda q: q.data and q.data.startswith("user_manage:"))
async def user_manage_callback(query: types.CallbackQuery, state: FSMContext):
    uid_str = query.data.split(":", 1)[1]
    try:
        uid = int(uid_str)
    except ValueError:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    await state.update_data(manage_user_id=uid)
    conn = await get_connection()
    try:
        async with conn.cursor(DictCursor) as cur:
            await cur.execute("SELECT * FROM users WHERE tg_id = %s", (uid,))
            user = await cur.fetchone()
        if not user:
            await query.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        info = (
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:\n"
            f"–ò–º—è: {user.get('full_name') or '-'}\n"
            f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{user.get('username') or '-'}\n"
            f"ID: {user.get('tg_id')}\n"
            f"–†–∞–Ω–≥: {user.get('rank') or '-'}\n"
            f"–ë–∞–ª–∞–Ω—Å: {user.get('balance') or 0}"
        )
        await query.message.answer(info)
        # –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –≤—ã–¥–∞—á–∞/—Å–Ω—è—Ç–∏–µ –∞–ª–º–∞–∑–∏–∫–æ–≤, –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞, –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞, –ù–∞–∑–∞–¥
        options = [
            InlineKeyboardButton(text="–í—ã–¥–∞—Ç—å –∞–ª–º–∞–∑–∏–∫–∏", callback_data=f"user_diamond:{uid}:give"),
            InlineKeyboardButton(text="–ó–∞–±—Ä–∞—Ç—å –∞–ª–º–∞–∑–∏–∫–∏", callback_data=f"user_diamond:{uid}:take"),
            InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–Ω–≥", callback_data=f"user_rank:{uid}"),
        ]
        if user.get("blocked"):
            options.append(InlineKeyboardButton(text="–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"user_toggle:{uid}"))
        else:
            options.append(InlineKeyboardButton(text="–ë–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"user_toggle:{uid}"))
        options.append(InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_users_list"))
        kb = InlineKeyboardMarkup(inline_keyboard=[options])
        await query.message.answer("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:", reply_markup=kb)
        print(f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏] –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid}")
        await query.answer()
    except Exception as e:
        await query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: <code>{e}</code>")
        print("[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ERROR –ø—Ä–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏]", e)
    finally:
        await safe_close(conn)

# FSM –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞ (–∞–ª–º–∞–∑–∏–∫–∏)
class UserDiamondState(StatesGroup):
    waiting_for_diamond_value = State()

@router.callback_query(lambda q: q.data and q.data.startswith("user_diamond:"))
async def user_diamond_callback(query: types.CallbackQuery, state: FSMContext):
    parts = query.data.split(":")
    try:
        uid = int(parts[1])
        action = parts[2]  # "give" –∏–ª–∏ "take"
    except ValueError:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    await state.update_data(manage_user_id=uid, diamond_action=action)
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª–º–∞–∑–∏–∫–æ–≤:")
    await UserDiamondState.waiting_for_diamond_value.set()
    print(f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏] –ò–∑–º–µ–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –¥–ª—è {uid}, –¥–µ–π—Å—Ç–≤–∏–µ {action}")
    await query.answer()

@router.message(UserDiamondState.waiting_for_diamond_value)
async def process_diamond_change(message: Message, state: FSMContext):
    data = await state.get_data()
    uid = data.get("manage_user_id")
    action = data.get("diamond_action")
    try:
        value = int(message.text)
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            if action == "give":
                await cur.execute("UPDATE users SET balance = balance + %s WHERE tg_id = %s", (value, uid))
            else:
                await cur.execute("UPDATE users SET balance = GREATEST(balance - %s, 0) WHERE tg_id = %s", (value, uid))
            await conn.commit()
        if action == "give":
            notif = f"–í–∞–º –±—ã–ª–æ –≤—ã–¥–∞–Ω–æ {value} üíé."
        else:
            notif = f"–£ –≤–∞—Å –±—ã–ª–æ —Å–Ω—è—Ç–æ {value} üíé."
        await message.bot.send_message(uid, notif)
        await message.answer("–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω.")
        print(f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏] –ë–∞–ª–∞–Ω—Å –¥–ª—è {uid} –∏–∑–º–µ–Ω—ë–Ω: {action} {value}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞: <code>{e}</code>")
        print("[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ERROR –ø—Ä–∏ –±–∞–ª–∞–Ω—Å–µ]", e)
    finally:
        await state.clear()
        await safe_close(conn)
        await send_users_list_to_admin(message, state)

# FSM –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–Ω–≥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
class UserRankState(StatesGroup):
    waiting_for_new_rank = State()

@router.callback_query(lambda q: q.data and q.data.startswith("user_rank:"))
async def user_rank_callback(query: types.CallbackQuery, state: FSMContext):
    uid_str = query.data.split(":", 1)[1]
    try:
        uid = int(uid_str)
    except ValueError:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    await state.update_data(manage_user_id=uid)
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await UserRankState.waiting_for_new_rank.set()
    print(f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏] –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–Ω–≥–∞ –¥–ª—è {uid}")
    await query.answer()

@router.message(UserRankState.waiting_for_new_rank)
async def process_new_rank(message: Message, state: FSMContext):
    new_rank = message.text.strip()
    data = await state.get_data()
    uid = data.get("manage_user_id")
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("UPDATE users SET rank = %s WHERE tg_id = %s", (new_rank, uid))
            await conn.commit()
        await message.answer(f"–†–∞–Ω–≥ –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ {new_rank}.")
        try:
            await message.bot.send_message(uid, f"–í–∞—à —Ä–∞–Ω–≥ –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_rank}.")
        except Exception as ex:
            print(f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏] –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {uid}: {ex}")
        print(f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏] –†–∞–Ω–≥ –¥–ª—è {uid} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {new_rank}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–Ω–≥–∞: <code>{e}</code>")
        print("[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ERROR –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ä–∞–Ω–≥–∞]", e)
    finally:
        await state.clear()
        await safe_close(conn)
        await send_users_list_to_admin(message, state)

@router.callback_query(lambda q: q.data and q.data.startswith("user_toggle:"))
async def user_toggle_callback(query: types.CallbackQuery, state: FSMContext):
    uid_str = query.data.split(":", 1)[1]
    try:
        uid = int(uid_str)
    except ValueError:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("SELECT blocked FROM users WHERE tg_id = %s", (uid,))
            result = await cur.fetchone()
            if not result:
                await query.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                return
            curr_block = result[0]
            new_block = not curr_block
            await cur.execute("UPDATE users SET blocked = %s WHERE tg_id = %s", (new_block, uid))
            await conn.commit()
        await query.message.answer("–°—Ç–∞—Ç—É—Å –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –æ–±–Ω–æ–≤–ª—ë–Ω.")
        print(f"[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏] –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è {uid} –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {new_block}")
        await query.answer()
        await send_users_list_to_admin(query.message, state)
    except Exception as e:
        await query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: <code>{e}</code>")
        print("[–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ERROR –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ]", e)
    finally:
        await safe_close(conn)

# =========================================  
#           –†–ê–ó–î–ï–õ "–û–ë–™–Ø–í–õ–ï–ù–ò–Ø"  
# =========================================  

class BroadcastState(StatesGroup):
    waiting_for_broadcast = State()

@router.callback_query(lambda q: q.data == "admin_broadcast")
async def broadcast_callback(query: types.CallbackQuery, state: FSMContext):
    await query.message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ (—Ç–µ–∫—Å—Ç, –≥–æ–ª–æ—Å, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏ —Ç.–ø.) –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º:")
    await BroadcastState.waiting_for_broadcast.set()
    print("[–û–±—ä—è–≤–ª–µ–Ω–∏—è] –ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è")
    await query.answer()

@router.message(BroadcastState.waiting_for_broadcast)
async def process_broadcast(message: Message, state: FSMContext):
    conn = await get_connection()
    try:
        async with conn.cursor(DictCursor) as cur:
            await cur.execute("SELECT tg_id FROM users")
            users = await cur.fetchall()
        count = 0
        # –ï—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ, —Ä–∞—Å—Å—ã–ª–∞–µ–º –∫–∞–∫ —Å–æ–æ–±—â–µ–Ω–∏–µ; –µ—Å–ª–∏ –º–µ–¥–∏–∞ ‚Äì –∏—Å–ø–æ–ª—å–∑—É–µ–º copy_message
        if message.content_type == 'text':
            ann_text = message.text
            for user in users:
                try:
                    await message.bot.send_message(user.get("tg_id"), f"üì£ –û–±—ä—è–≤–ª–µ–Ω–∏–µ:\n\n{ann_text}")
                    count += 1
                except Exception as ex:
                    print(f"[–û–±—ä—è–≤–ª–µ–Ω–∏—è] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.get('tg_id')}: {ex}")
        else:
            # –ï—Å–ª–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–¥–∏–∞ (—Ñ–æ—Ç–æ, –≥–æ–ª–æ—Å, –≤–∏–¥–µ–æ), —Ä–∞—Å—Å—ã–ª–∞–µ–º —á–µ—Ä–µ–∑ copy_message
            for user in users:
                try:
                    await message.bot.copy_message(
                        chat_id=user.get("tg_id"),
                        from_chat_id=message.chat.id,
                        message_id=message.message_id
                    )
                    count += 1
                except Exception as ex:
                    print(f"[–û–±—ä—è–≤–ª–µ–Ω–∏—è] –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –º–µ–¥–∏–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.get('tg_id')}: {ex}")
        await message.answer(f"–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        print(f"[–û–±—ä—è–≤–ª–µ–Ω–∏—è] –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, {count} –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: <code>{e}</code>")
        print("[–û–±—ä—è–≤–ª–µ–Ω–∏—è ERROR]", e)
    finally:
        await state.clear()
        await safe_close(conn)
