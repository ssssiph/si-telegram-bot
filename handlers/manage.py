import os
import json
from aiogram import Router, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State  # –¥–ª—è aiogram v3.x
from aiomysql import DictCursor  # –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –≤–∏–¥–µ —Å–ª–æ–≤–∞—Ä—è
from database import get_connection

router = Router()
ADMIN_ID = 1016554094  # –£–∫–∞–∂–∏—Ç–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã–π ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞–Ω–∞–ª–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä: "-1001234567890,-1009876543210")
channels_raw = os.getenv("CHANNEL_IDS", "")
CHANNEL_IDS = [int(ch.strip()) for ch in channels_raw.split(",") if ch.strip()]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
async def safe_close(conn):
    if conn:
        try:
            ret = conn.close()
            if ret is not None and hasattr(ret, '__await__'):
                await ret
        except Exception as ex:
            print("safe_close error:", ex)

# =============================================================================
# FSM –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ
# =============================================================================
class ContactReplyState(StatesGroup):
    waiting_for_reply = State()

# =============================================================================
# FSM –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
# =============================================================================
class EventCreation(StatesGroup):
    waiting_for_title = State()
    waiting_for_datetime = State()
    waiting_for_description = State()
    waiting_for_prize = State()
    waiting_for_media = State()

# =============================================================================
# FSM –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
# =============================================================================
class EventEditState(StatesGroup):
    waiting_for_edit_details = State()

# =============================================================================
# –ì–ª–∞–≤–Ω–∞—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
# =============================================================================
@router.message(lambda message: message.text and message.text.strip().lower() == "‚öôÔ∏è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
async def admin_panel(message: Message, state: FSMContext):
    print("[Admin] –ó–∞–ø—É—Å–∫ –ø–∞–Ω–µ–ª–∏ –¥–ª—è", message.from_user.id)
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("SELECT `rank` FROM users WHERE tg_id = %s", (message.from_user.id,))
            result = await cur.fetchone()
            if not result:
                await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return
            user_rank = result[0]
        if user_rank != "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä":
            await message.answer("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ.")
            return
        # –ú–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Å–µ–∫—Ü–∏–π: –û–±—Ä–∞—â–µ–Ω–∏—è –∏ –°–æ–±—ã—Ç–∏—è (–æ—Å—Ç–∞–ª—å–Ω—ã–µ –º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –ø–æ–∑–¥–Ω–µ–µ)
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û–±—Ä–∞—â–µ–Ω–∏—è", callback_data="admin_contacts_list")],
            [InlineKeyboardButton(text="–°–æ–±—ã—Ç–∏—è", callback_data="admin_events_list")]
        ])
        await message.answer("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=kb)
        print("[Admin] –ú–µ–Ω—é –≤—ã–≤–µ–¥–µ–Ω–æ")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω–∫–µ:\n<code>{e}</code>")
        print("[Admin ERROR]", e)
    finally:
        await safe_close(conn)

# =============================================================================
# –†–∞–∑–¥–µ–ª "–û–±—Ä–∞—â–µ–Ω–∏—è" ‚Äì —Ä–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è (–∫–∞–∫ —Ä–∞–Ω–µ–µ)
# =============================================================================
async def send_contacts_list_to_admin(dest_message: Message, state: FSMContext):
    print("[–û–±—Ä–∞—â–µ–Ω–∏—è] –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π")
    conn = await get_connection()
    try:
        data = await state.get_data()
        page = data.get("contacts_page", 1)
        per_page = 9
        offset = (page - 1) * per_page
        async with conn.cursor(DictCursor) as cur:
            await cur.execute(
                "SELECT * FROM contacts WHERE answered = FALSE ORDER BY created_at DESC LIMIT %s OFFSET %s",
                (per_page, offset)
            )
            contacts = await cur.fetchall()
        if not contacts:
            await dest_message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.")
            return
        buttons = []
        for contact in contacts:
            cid = contact.get("id")
            full_name = contact.get("full_name") or "-"
            username = contact.get("username") or "-"
            created_at = contact.get("created_at")
            date_str = str(created_at) if created_at else ""
            btn_text = f"{full_name} (@{username} | {cid}) {date_str}"
            buttons.append([InlineKeyboardButton(text=btn_text, callback_data=f"contact_reply:{cid}")])
        if len(contacts) == per_page:
            buttons.append([InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="contacts_page:next")])
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        await dest_message.answer("–°–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π:", reply_markup=kb)
        print("[–û–±—Ä–∞—â–µ–Ω–∏—è] –°–ø–∏—Å–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        await dest_message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π: <code>{e}</code>")
        print("[–û–±—Ä–∞—â–µ–Ω–∏—è ERROR]", e)
    finally:
        await safe_close(conn)

@router.callback_query(lambda q: q.data == "admin_contacts_list")
async def admin_contacts_list_callback(query: types.CallbackQuery, state: FSMContext):
    print("[–û–±—Ä–∞—â–µ–Ω–∏—è] –ö–Ω–æ–ø–∫–∞ '–û–±—Ä–∞—â–µ–Ω–∏—è' –Ω–∞–∂–∞—Ç–∞")
    await send_contacts_list_to_admin(query.message, state)
    await query.answer()

@router.callback_query(lambda q: q.data and q.data.startswith("contacts_page:"))
async def contacts_page_nav(query: types.CallbackQuery, state: FSMContext):
    direction = query.data.split(":", 1)[1]
    data = await state.get_data()
    page = data.get("contacts_page", 1)
    if direction == "next":
        page += 1
    else:
        page = max(1, page - 1)
    await state.update_data(contacts_page=page)
    await send_contacts_list_to_admin(query.message, state)
    await query.answer()

@router.callback_query(lambda q: q.data and q.data.startswith("contact_reply:"))
async def contact_reply_select(query: types.CallbackQuery, state: FSMContext):
    cid_str = query.data.split(":", 1)[1]
    try:
        cid = int(cid_str)
    except ValueError:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    await state.update_data(contact_reply_id=cid)
    print(f"[–û–±—Ä–∞—â–µ–Ω–∏—è] –í—ã–±—Ä–∞–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ #{cid} –¥–ª—è –æ—Ç–≤–µ—Ç–∞")
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è:")
    await state.set_state(ContactReplyState.waiting_for_reply)
    await query.answer("–û–∂–∏–¥–∞–µ—Ç—Å—è –≤–∞—à –æ—Ç–≤–µ—Ç.")

@router.message(ContactReplyState.waiting_for_reply)
async def process_contact_reply(message: Message, state: FSMContext):
    data = await state.get_data()
    cid = data.get("contact_reply_id")
    if not cid:
        await message.answer("–û—à–∏–±–∫–∞: –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ.")
        await state.clear()
        return
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("UPDATE contacts SET answered = TRUE WHERE id = %s", (cid,))
            await conn.commit()
        async with conn.cursor(DictCursor) as cur:
            await cur.execute("SELECT * FROM contacts WHERE id = %s", (cid,))
            contact = await cur.fetchone()
        if not contact:
            await message.answer("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await state.clear()
            return
        target_id = contact.get("tg_id")
        if not target_id:
            await message.answer("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç tg_id.")
            await state.clear()
            return
        print(f"[–û–±—Ä–∞—â–µ–Ω–∏—è] –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_id}")
        if message.content_type == "text":
            await message.bot.send_message(target_id, f"üì® –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n{message.text}")
        else:
            await message.bot.copy_message(
                chat_id=target_id,
                from_chat_id=message.chat.id,
                message_id=message.message_id
            )
        await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: <code>{e}</code>")
        print("[–û–±—Ä–∞—â–µ–Ω–∏—è ERROR –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ]", e)
    finally:
        await state.clear()
        await safe_close(conn)
        await send_contacts_list_to_admin(message, state)

# =============================================================================
# –†–∞–∑–¥–µ–ª "–°–æ–±—ã—Ç–∏—è" ‚Äì —Å–æ–∑–¥–∞–Ω–∏–µ, –ø—É–±–ª–∏–∫–∞—Ü–∏—è, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π
# =============================================================================
async def send_events_list_to_admin(dest_message: Message, state: FSMContext):
    print("[Events] –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π")
    conn = await get_connection()
    try:
        data = await state.get_data()
        page = data.get("events_page", 1)
        per_page = 9
        offset = (page - 1) * per_page
        async with conn.cursor(DictCursor) as cur:
            await cur.execute("SELECT * FROM events ORDER BY datetime DESC LIMIT %s OFFSET %s", (per_page, offset))
            events = await cur.fetchall()
        buttons = []
        buttons.append([InlineKeyboardButton(text="–°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="event_create")])
        if events:
            for event in events:
                title = event.get("title") or "-"
                datetime_str = event.get("datetime") or "-"
                eid = event.get("id")
                btn_text = f"{title} | {datetime_str}"
                buttons.append([InlineKeyboardButton(text=btn_text, callback_data=f"event_edit:{eid}")])
            if len(events) == per_page:
                buttons.append([InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="events_page:next")])
        else:
            buttons.append([InlineKeyboardButton(text="–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π", callback_data="none")])
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        await dest_message.answer("–°–æ–±—ã—Ç–∏—è:", reply_markup=kb)
        print("[Events] –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        await dest_message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π: <code>{e}</code>")
        print("[Events ERROR –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏]", e)
    finally:
        await safe_close(conn)

@router.callback_query(lambda q: q.data == "admin_events_list")
async def admin_events_list_callback(query: types.CallbackQuery, state: FSMContext):
    await send_events_list_to_admin(query.message, state)
    await query.answer()

@router.callback_query(lambda q: q.data and q.data.startswith("events_page:"))
async def events_page_nav(query: types.CallbackQuery, state: FSMContext):
    direction = query.data.split(":", 1)[1]
    data = await state.get_data()
    page = data.get("events_page", 1)
    if direction == "next":
        page += 1
    else:
        page = max(1, page - 1)
    await state.update_data(events_page=page)
    await send_events_list_to_admin(query.message, state)
    await query.answer()

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ FSM (EventCreation)
@router.callback_query(lambda q: q.data == "event_create")
async def event_create_callback(query: types.CallbackQuery, state: FSMContext):
    print("[Events] –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è")
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
    await state.set_state(EventCreation.waiting_for_title)
    await query.answer()

@router.message(EventCreation.waiting_for_title)
async def process_event_title(message: Message, state: FSMContext):
    await state.update_data(event_title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è:")
    await state.set_state(EventCreation.waiting_for_datetime)
    print("[Events] –ù–∞–∑–≤–∞–Ω–∏–µ:", message.text)

@router.message(EventCreation.waiting_for_datetime)
async def process_event_datetime(message: Message, state: FSMContext):
    await state.update_data(event_datetime=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
    await state.set_state(EventCreation.waiting_for_description)
    print("[Events] –î–∞—Ç–∞-–≤—Ä–µ–º—è:", message.text)

@router.message(EventCreation.waiting_for_description)
async def process_event_description(message: Message, state: FSMContext):
    await state.update_data(event_description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–∑ (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º):")
    await state.set_state(EventCreation.waiting_for_prize)
    print("[Events] –û–ø–∏—Å–∞–Ω–∏–µ:", message.text)

@router.message(EventCreation.waiting_for_prize)
async def process_event_prize(message: Message, state: FSMContext):
    await state.update_data(event_prize=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 'skip':")
    await state.set_state(EventCreation.waiting_for_media)
    print("[Events] –ü—Ä–∏–∑:", message.text)

@router.message(EventCreation.waiting_for_media)
async def process_event_media(message: Message, state: FSMContext):
    media = ""
    if message.text and message.text.lower() == "skip":
        media = ""
    else:
        if message.photo:
            media = message.photo[-1].file_id
        elif message.voice:
            media = message.voice.file_id
    data = await state.get_data()
    title = data.get("event_title")
    datetime_str = data.get("event_datetime")
    description = data.get("event_description")
    prize = data.get("event_prize")
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute(
                "INSERT INTO events (title, description, prize, datetime, media, creator_id, published) VALUES (%s, %s, %s, %s, %s, %s, %s)",
                (title, description, prize, datetime_str, media, message.from_user.id, "{}")
            )
            await conn.commit()
            event_id = cur.lastrowid
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data=f"event_publish:{event_id}")],
            [InlineKeyboardButton(text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data=f"event_edit:{event_id}")],
            [InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data=f"event_delete:{event_id}")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="admin_events_list")]
        ])
        await message.answer(f"–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å ID: {event_id}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
        print("[Events] –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ, ID:", event_id)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: <code>{e}</code>")
        print("[Events ERROR –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏]", e)
    finally:
        await state.clear()
        await safe_close(conn)

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è ‚Äì —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞ —Å–æ–±—ã—Ç–∏–π
@router.callback_query(lambda q: q.data and q.data.startswith("event_edit:"))
async def event_edit_callback(query: types.CallbackQuery, state: FSMContext):
    eid_str = query.data.split(":", 1)[1]
    try:
        eid = int(eid_str)
    except ValueError:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    conn = await get_connection()
    try:
        async with conn.cursor(DictCursor) as cur:
            await cur.execute("SELECT * FROM events WHERE id = %s", (eid,))
            event = await cur.fetchone()
        if not event:
            await query.message.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        current_details = (
            f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {event.get('title')}\n"
            f"–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {event.get('datetime')}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {event.get('description')}\n"
            f"–ü—Ä–∏–∑: {event.get('prize')}\n"
            f"–ú–µ–¥–∏–∞: {event.get('media') or '–Ω–µ—Ç'}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
            "–ù–∞–∑–≤–∞–Ω–∏–µ | –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è | –û–ø–∏—Å–∞–Ω–∏–µ | –ü—Ä–∏–∑ | –ú–µ–¥–∏–∞ (–∏–ª–∏ 'skip')"
        )
        await query.message.answer(current_details)
        await state.update_data(edit_event_id=eid)
        await state.set_state(EventEditState.waiting_for_edit_details)
        await query.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞—á–∞—Ç–æ.")
    except Exception as e:
        await query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: <code>{e}</code>")
        print("[Events ERROR –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è]", e)
    finally:
        await safe_close(conn)

@router.message(EventEditState.waiting_for_edit_details)
async def process_event_edit(message: Message, state: FSMContext):
    parts = [s.strip() for s in message.text.split("|")]
    if len(parts) < 5:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ | –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è | –û–ø–∏—Å–∞–Ω–∏–µ | –ü—Ä–∏–∑ | –ú–µ–¥–∏–∞ (–∏–ª–∏ 'skip')")
        return
    title, datetime_str, description, prize, media = parts
    if media.lower() == "skip":
        media = ""
    data = await state.get_data()
    eid = data.get("edit_event_id")
    if not eid:
        await message.answer("–û—à–∏–±–∫–∞: ID —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute(
                "UPDATE events SET title=%s, datetime=%s, description=%s, prize=%s, media=%s WHERE id = %s",
                (title, datetime_str, description, prize, media, eid)
            )
            await conn.commit()
        await message.answer("–°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.")
        print(f"[Events] –°–æ–±—ã—Ç–∏–µ {eid} –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: <code>{e}</code>")
        print("[Events ERROR –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏]", e)
    finally:
        await state.clear()
        await safe_close(conn)

# –ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è ‚Äì –æ—Ç–ø—Ä–∞–≤–∫–∞ –µ–≥–æ –≤ –∫–∞–Ω–∞–ª—ã
@router.callback_query(lambda q: q.data and q.data.startswith("event_publish:"))
async def event_publish_callback(query: types.CallbackQuery, state: FSMContext):
    eid_str = query.data.split(":", 1)[1]
    try:
        eid = int(eid_str)
    except ValueError:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    conn = await get_connection()
    try:
        async with conn.cursor(DictCursor) as cur:
            await cur.execute("SELECT * FROM events WHERE id = %s", (eid,))
            event = await cur.fetchone()
        if not event:
            await query.message.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        publish_text = (
            f"üì¢ <b>–°–æ–±—ã—Ç–∏–µ!</b>\n\n"
            f"<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {event.get('title')}\n"
            f"<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {event.get('datetime')}\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {event.get('description')}\n"
            f"<b>–ü—Ä–∏–∑:</b> {event.get('prize')}"
        )
        if event.get("media"):
            publish_text += f"\n(–ú–µ–¥–∏–∞: {event.get('media')})"
        published = {}
        for ch in CHANNEL_IDS:
            try:
                sent = await query.bot.send_message(ch, publish_text, parse_mode="HTML")
                published[str(ch)] = sent.message_id
            except Exception as pub_e:
                print(f"[Events] –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ {ch}: {pub_e}")
        async with conn.cursor() as cur:
            await cur.execute("UPDATE events SET published = %s WHERE id = %s", (json.dumps(published), eid))
            await conn.commit()
        await query.message.answer("–°–æ–±—ã—Ç–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤–æ –≤—Å–µ—Ö –∫–∞–Ω–∞–ª–∞—Ö.")
        print(f"[Events] –°–æ–±—ã—Ç–∏–µ {eid} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:", published)
    except Exception as e:
        await query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è: <code>{e}</code>")
        print("[Events ERROR –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏]", e)
    finally:
        await safe_close(conn)
        await query.answer()

# –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
@router.callback_query(lambda q: q.data and q.data.startswith("event_delete:"))
async def event_delete_callback(query: types.CallbackQuery, state: FSMContext):
    eid_str = query.data.split(":", 1)[1]
    try:
        eid = int(eid_str)
    except ValueError:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("DELETE FROM events WHERE id = %s", (eid,))
            await conn.commit()
        await query.message.answer("–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
        print(f"[Events] –°–æ–±—ã—Ç–∏–µ {eid} —É–¥–∞–ª–µ–Ω–æ")
    except Exception as e:
        await query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: <code>{e}</code>")
        print("[Events ERROR –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏]", e)
    finally:
        await safe_close(conn)
        await query.answer()

# =============================================================================
# –°–µ–∫—Ü–∏–∏ "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏" –∏ "–û–±—ä—è–≤–ª–µ–Ω–∏—è" –æ—Å—Ç–∞–≤–ª–µ–Ω—ã –∑–∞–≥–ª—É—à–∫–∞–º–∏
# =============================================================================
@router.callback_query(lambda q: q.data == "admin_users_list")
async def users_list_stub(query: types.CallbackQuery, state: FSMContext):
    await query.message.answer("–°–µ–∫—Ü–∏—è '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")
    await query.answer()

@router.callback_query(lambda q: q.data == "admin_broadcast")
async def broadcast_stub(query: types.CallbackQuery, state: FSMContext):
    await query.message.answer("–°–µ–∫—Ü–∏—è '–û–±—ä—è–≤–ª–µ–Ω–∏—è' –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")
    await query.answer()
