import os
import json
from aiogram import Router, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiomysql import DictCursor
from database import get_connection, safe_close

router = Router()

ADMIN_ID = 1016554091
PUBLISH_CHANNEL_ID = -1002292957980

async def safe_close(conn):
    if conn:
        try:
            ret = conn.close()
            if ret is not None and hasattr(ret, '__await__'):
                await ret
        except Exception as ex:
            print("safe_close error:", ex)

class BroadcastState(StatesGroup):
    waiting_for_broadcast_message = State()

class ContactReplyState(StatesGroup):
    waiting_for_reply = State()

class EventCreation(StatesGroup):
    waiting_for_title = State()
    waiting_for_datetime = State()
    waiting_for_description = State()
    waiting_for_prize = State()
    waiting_for_media = State()

class EventEditState(StatesGroup):
    waiting_for_edit_details = State()

class UserEditState(StatesGroup):
    waiting_for_new_rank = State()

class DiamondsState(StatesGroup):
    waiting_for_amount = State()

class PromoCreationState(StatesGroup):
    waiting_for_promo_data = State()

async def is_user_blocked(user_id: int) -> bool:
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("SELECT blocked FROM users WHERE tg_id = %s", (user_id,))
            result = await cur.fetchone()
            return bool(result[0]) if result is not None else False
    except Exception as e:
        print("Error in is_user_blocked:", e)
        return False
    finally:
        await safe_close(conn)

@router.message(lambda m: m.chat.type == "private" and m.from_user.id != ADMIN_ID 
                           and m.text not in ["üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥—ã", "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ"])
async def handle_incoming_contact(m: Message, state: FSMContext):
    if await state.get_state() is not None:
        return
    if await is_user_blocked(m.from_user.id):
        await m.answer("üö´ –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ.")
        return
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("SELECT `rank` FROM users WHERE tg_id = %s", (m.from_user.id,))
            result = await cur.fetchone()
        if result is None or result[0] == "–ì–æ—Å—Ç—å":
            await m.answer("üö´ –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ.")
            return

        sender_info = f"{m.from_user.full_name} (@{m.from_user.username})" if m.from_user.username else m.from_user.full_name
        content = m.text if m.content_type == "text" else f"[–ú–µ–¥–∏–∞: {m.content_type}]\n–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_info}"

        async with conn.cursor() as cur:
            await cur.execute(
                "INSERT INTO contacts (tg_id, full_name, username, message, answered) VALUES (%s, %s, %s, %s, %s)",
                (m.from_user.id, m.from_user.full_name, m.from_user.username, content, False)
            )
            await conn.commit()

        await m.answer("–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ.")

    except Exception as e:
        await m.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è: <code>{e}</code>")
    finally:
        await safe_close(conn)

@router.message(lambda message: message.text and message.text.strip().lower() == "‚öôÔ∏è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
async def admin_panel(message: Message, state: FSMContext):
    await state.clear()
    print("[Admin] –ó–∞–ø—É—Å–∫ –ø–∞–Ω–µ–ª–∏ –¥–ª—è", message.from_user.id)
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("SELECT `rank` FROM users WHERE tg_id = %s", (message.from_user.id,))
            result = await cur.fetchone()
            if not result:
                await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return
            user_rank = result[0]
        current_state = await state.get_state()
        if current_state is None and user_rank != "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä":
            await message.answer("üö´ –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ.")
            return
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì• –û–±—Ä–∞—â–µ–Ω–∏—è", callback_data="admin_contacts_list")],
            [InlineKeyboardButton(text="üìÖ –°–æ–±—ã—Ç–∏—è", callback_data="admin_events_list")],
            [InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users_list")],
            [InlineKeyboardButton(text="üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="admin_promo_codes")],
            [InlineKeyboardButton(text="üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="admin_broadcast")]
        ])
        await message.answer("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=kb)
        print("[Admin] –ú–µ–Ω—é –≤—ã–≤–µ–¥–µ–Ω–æ")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:\n<code>{e}</code>")
        print("[Admin ERROR]", e)
    finally:
        await safe_close(conn)

# –û–±—Ä–∞—â–µ–Ω–∏—è
async def send_contacts_list_to_admin(dest_message: Message, state: FSMContext):
    print("[Contacts] –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π")
    conn = await get_connection()
    try:
        data = await state.get_data()
        page = data.get("contacts_page", 1)
        per_page = 9
        offset = (page - 1) * per_page

        async with conn.cursor(DictCursor) as cur:
            await cur.execute(
                "SELECT * FROM contacts WHERE answered = FALSE ORDER BY created_at DESC LIMIT %s OFFSET %s",
                (per_page, offset)
            )
            contacts = await cur.fetchall()

        if not contacts:
            await dest_message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.")
            return

        buttons = []
        for contact in contacts:
            cid = contact.get("id")
            full_name = contact.get("full_name") or "-"
            username = contact.get("username") or "-"
            created_at = contact.get("created_at")
            date_str = str(created_at) if created_at else ""

            btn_text = f"{full_name} (@{username} | {cid}) {date_str}"
            buttons.append([InlineKeyboardButton(text=btn_text, callback_data=f"contact_reply:{cid}")])

        if len(contacts) == per_page:
            buttons.append([InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="contacts_page:next")])

        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        await dest_message.answer("–û–±—Ä–∞—â–µ–Ω–∏—è:", reply_markup=kb)
        print("[Contacts] –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")

    except Exception as e:
        await dest_message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π: {e}")
        print("[Contacts ERROR]", e)
    finally:
        await safe_close(conn)

@router.callback_query(lambda q: q.data == "admin_contacts_list")
async def admin_contacts_list_callback(query: types.CallbackQuery, state: FSMContext):
    await send_contacts_list_to_admin(query.message, state)
    await query.answer()

@router.callback_query(lambda q: q.data and q.data.startswith("contacts_page:"))
async def contacts_page_nav(query: types.CallbackQuery, state: FSMContext):
    direction = query.data.split(":", 1)[1]
    data = await state.get_data()
    page = data.get("contacts_page", 1)
    page = page + 1 if direction == "next" else max(1, page - 1)
    await state.update_data(contacts_page=page)
    await send_contacts_list_to_admin(query.message, state)
    await query.answer()

@router.callback_query(lambda q: q.data and q.data.startswith("contact_reply:"))
async def contact_reply_select(query: types.CallbackQuery, state: FSMContext):
    cid_str = query.data.split(":", 1)[1]
    try:
        cid = int(cid_str)
    except ValueError:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return

    await state.update_data(contact_reply_id=cid)
    conn = await get_connection()
    try:
        async with conn.cursor(DictCursor) as cur:
            await cur.execute("SELECT * FROM contacts WHERE id = %s", (cid,))
            contact = await cur.fetchone()

        if contact:
            full_name = contact.get("full_name", "-")
            username = contact.get("username", "-")
            author_info = f"{full_name} (@{username})"
            original_text = contact.get("message") or "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è."

            await query.message.answer(f"üì® –ò—Å—Ö–æ–¥–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç {author_info}:\n\n{original_text}\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–µ–¥–∏–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            media_type = contact.get("content_type")
            media_id = contact.get("content")

            if media_type == "photo":
                await query.message.bot.send_photo(query.message.chat.id, media_id, caption=f"üì∑ –§–æ—Ç–æ –æ—Ç {author_info}")
            elif media_type == "video":
                await query.message.bot.send_video(query.message.chat.id, media_id, caption=f"üé• –í–∏–¥–µ–æ –æ—Ç {author_info}")
            elif media_type == "voice":
                await query.message.bot.send_voice(query.message.chat.id, media_id, caption=f"üéôÔ∏è –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {author_info}")
            elif media_type == "document":
                await query.message.bot.send_document(query.message.chat.id, media_id, caption=f"üìÑ –§–∞–π–ª –æ—Ç {author_info}")

        else:
            await query.message.answer("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    except Exception as e:
        await query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è: {e}")
        print("[Contacts ERROR]", e)
    finally:
        await safe_close(conn)

    await state.set_state(ContactReplyState.waiting_for_reply)
    await query.answer("–û–∂–∏–¥–∞–µ—Ç—Å—è –≤–∞—à –æ—Ç–≤–µ—Ç.")

@router.message(ContactReplyState.waiting_for_reply)
async def process_contact_reply(message: Message, state: FSMContext):
    data = await state.get_data()
    cid = data.get("contact_reply_id")
    if not cid:
        await message.answer("–û—à–∏–±–∫–∞: –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ.")
        await state.clear()
        return

    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("UPDATE contacts SET answered = TRUE WHERE id = %s", (cid,))
            await conn.commit()

        async with conn.cursor(DictCursor) as cur:
            await cur.execute("SELECT * FROM contacts WHERE id = %s", (cid,))
            contact = await cur.fetchone()

        if not contact:
            await message.answer("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await state.clear()
            return

        target_id = contact.get("tg_id")
        if not target_id:
            await message.answer("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç tg_id.")
            await state.clear()
            return

        author_info = f"{contact.get('full_name', '-')}" + (f" (@{contact.get('username', '-')})" if contact.get("username") else "")
        original_text = contact.get("message") or "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è."
        header = f"–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç {author_info}:\n\n{original_text}\n\n–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:"

        if message.content_type == "text":
            await message.bot.send_message(target_id, header + "\n\n" + message.text)
        else:
            await message.bot.send_message(target_id, header + "\n\n–û—Ç–≤–µ—Ç –Ω–∏–∂–µ:")
            await message.bot.copy_message(chat_id=target_id, from_chat_id=message.chat.id, message_id=message.message_id)

        await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: <code>{e}</code>")
        print("[Contacts ERROR –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ]", e)
    finally:
        await state.clear()
        await safe_close(conn)
        await send_contacts_list_to_admin(message, state)

# –ü—Ä–æ–º–æ–∫–æ–¥—ã
@router.callback_query(lambda q: q.data == "admin_promo_codes")
async def admin_promo_codes_callback(query: types.CallbackQuery, state: FSMContext):
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("SELECT code, reward FROM promo_codes ORDER BY code ASC")
            promo_codes = await cur.fetchall()
        
        if not promo_codes:
            promo_list_text = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤."
        else:
            promo_list_text = "<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:</b>\n\n"
            for code, reward in promo_codes:
                promo_list_text += f"üîπ {code} ‚Äî {reward} üíé\n"

        await query.message.answer(
            f"{promo_list_text}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ–º–æ–∫–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª–º–∞–∑–æ–≤</b>"
        )
        await state.set_state(PromoCreationState.waiting_for_promo_data)
    except Exception as e:
        await query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {e}")
    finally:
        await safe_close(conn)

@router.message(PromoCreationState.waiting_for_promo_data)
async def process_promo_creation(message: Message, state: FSMContext):
    if message.text.strip().lower() == "–æ—Ç–º–µ–Ω–∞":
        await state.clear()
        await message.answer("üö´ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return
    
    parts = [s.strip() for s in message.text.split("|")]
    if len(parts) != 2:
        await message.answer("–û—à–∏–±–∫–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª–º–∞–∑–∏–∫–æ–≤</b>\n\n–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
        return
    
    code, reward_str = parts
    try:
        reward = int(reward_str)
    except ValueError:
        await message.answer("–û—à–∏–±–∫–∞! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª–º–∞–∑–∏–∫–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º.\n\n–ò–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–û—Ç–º–µ–Ω–∞' –¥–ª—è –≤—ã—Ö–æ–¥–∞.")
        return

    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("INSERT INTO promo_codes (code, reward) VALUES (%s, %s)", (code, reward))
            await conn.commit()
        await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {code} –Ω–∞ {reward} üíé —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
    finally:
        await state.clear()
        await safe_close(conn)

# –°–æ–±—ã—Ç–∏—è
async def send_events_list_to_admin(dest_message: Message, state: FSMContext):
    print("[Events] –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π")
    conn = await get_connection()
    try:
        data = await state.get_data()
        page = data.get("events_page", 1)
        per_page = 9
        offset = (page - 1) * per_page
        async with conn.cursor(DictCursor) as cur:
            await cur.execute("SELECT * FROM events ORDER BY datetime DESC LIMIT %s OFFSET %s", (per_page, offset))
            events = await cur.fetchall()
        buttons = []
        buttons.append([InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="event_create")])
        if events:
            for event in events:
                title = event.get("title") or "-"
                datetime_str = event.get("datetime") or "-"
                eid = event.get("id")
                btn_text = f"{title} | {datetime_str}"
                buttons.append([InlineKeyboardButton(text=btn_text, callback_data=f"event_edit:{eid}")])
            if len(events) == per_page:
                buttons.append([InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="events_page:next")])
        else:
            buttons.append([InlineKeyboardButton(text="–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π", callback_data="none")])
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        await dest_message.answer("–°–æ–±—ã—Ç–∏—è:", reply_markup=kb)
        print("[Events] –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        await dest_message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π: <code>{e}</code>")
        print("[Events ERROR –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏]", e)
    finally:
        await safe_close(conn)

@router.callback_query(lambda q: q.data == "admin_events_list")
async def admin_events_list_callback(query: types.CallbackQuery, state: FSMContext):
    await send_events_list_to_admin(query.message, state)
    await query.answer()

@router.callback_query(lambda q: q.data and q.data.startswith("events_page:"))
async def events_page_nav(query: types.CallbackQuery, state: FSMContext):
    direction = query.data.split(":", 1)[1]
    data = await state.get_data()
    page = data.get("events_page", 1)
    page = page + 1 if direction == "next" else max(1, page - 1)
    await state.update_data(events_page=page)
    await send_events_list_to_admin(query.message, state)
    await query.answer()

@router.callback_query(lambda q: q.data == "event_create")
async def event_create_callback(query: types.CallbackQuery, state: FSMContext):
    print("[Events] –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è")
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
    await state.set_state(EventCreation.waiting_for_title)
    await query.answer()

@router.message(EventCreation.waiting_for_title)
async def process_event_title(message: Message, state: FSMContext):
    await state.update_data(event_title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è:")
    await state.set_state(EventCreation.waiting_for_datetime)
    print("[Events] –ù–∞–∑–≤–∞–Ω–∏–µ:", message.text)

@router.message(EventCreation.waiting_for_datetime)
async def process_event_datetime(message: Message, state: FSMContext):
    await state.update_data(event_datetime=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
    await state.set_state(EventCreation.waiting_for_description)
    print("[Events] –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:", message.text)

@router.message(EventCreation.waiting_for_description)
async def process_event_description(message: Message, state: FSMContext):
    await state.update_data(event_description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–∑ (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º):")
    await state.set_state(EventCreation.waiting_for_prize)
    print("[Events] –û–ø–∏—Å–∞–Ω–∏–µ:", message.text)

@router.message(EventCreation.waiting_for_prize)
async def process_event_prize(message: Message, state: FSMContext):
    await state.update_data(event_prize=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ 'skip':")
    await state.set_state(EventCreation.waiting_for_media)
    print("[Events] –ü—Ä–∏–∑:", message.text)

@router.message(EventCreation.waiting_for_media)
async def process_event_media(message: Message, state: FSMContext):
    media = ""
    if message.text and message.text.lower() == "skip":
        media = ""
    else:
        if message.photo:
            media = message.photo[-1].file_id
        elif message.voice:
            media = message.voice.file_id
    data = await state.get_data()
    title = data.get("event_title")
    datetime_str = data.get("event_datetime")
    description = data.get("event_description")
    prize = data.get("event_prize")
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("INSERT INTO events (title, description, prize, datetime, media, creator_id, published) VALUES (%s, %s, %s, %s, %s, %s, %s)",
                (title, description, prize, datetime_str, media, message.from_user.id, "{}"))
            await conn.commit()
            event_id = cur.lastrowid
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì£ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"event_publish:{event_id}"),
             InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"event_delete:{event_id}")],
            [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data=f"event_edit:{event_id}")],
            [InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_events_list")]
        ])
        await message.answer(f"–°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ —Å ID: {event_id}. –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb)
        print("[Events] –°–æ–±—ã—Ç–∏–µ —Å–æ–∑–¥–∞–Ω–æ, ID:", event_id)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: <code>{e}</code>")
        print("[Events ERROR –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏]", e)
    finally:
        await state.clear()
        await safe_close(conn)

@router.callback_query(lambda q: q.data and q.data.startswith("event_edit:"))
async def event_edit_callback(query: types.CallbackQuery, state: FSMContext):
    eid_str = query.data.split(":", 1)[1]
    try:
        eid = int(eid_str)
    except ValueError:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    conn = await get_connection()
    try:
        async with conn.cursor(DictCursor) as cur:
            await cur.execute("SELECT * FROM events WHERE id = %s", (eid,))
            event = await cur.fetchone()
        if not event:
            await query.message.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        current_details = f"–¢–µ–∫—É—â–µ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ: {event.get('title')}\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {event.get('datetime')}\n–û–ø–∏—Å–∞–Ω–∏–µ: {event.get('description')}\n–ü—Ä–∏–∑: {event.get('prize')}\n–ú–µ–¥–∏–∞: {event.get('media') or '–Ω–µ—Ç'}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ | –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è | –û–ø–∏—Å–∞–Ω–∏–µ | –ü—Ä–∏–∑ | –ú–µ–¥–∏–∞ (–∏–ª–∏ 'skip')"
        await query.message.answer(current_details)
        await state.update_data(edit_event_id=eid)
        await state.set_state(EventEditState.waiting_for_edit_details)
        await query.answer("–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –Ω–∞—á–∞—Ç–æ.")
    except Exception as e:
        await query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: <code>{e}</code>")
        print("[Events ERROR –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è]", e)
    finally:
        await safe_close(conn)

@router.message(EventEditState.waiting_for_edit_details)
async def process_event_edit(message: Message, state: FSMContext):
    parts = [s.strip() for s in message.text.split("|")]
    if len(parts) < 5:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –ù–∞–∑–≤–∞–Ω–∏–µ | –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è | –û–ø–∏—Å–∞–Ω–∏–µ | –ü—Ä–∏–∑ | –ú–µ–¥–∏–∞ (–∏–ª–∏ 'skip')")
        return
    title, datetime_str, description, prize, media = parts
    if media.lower() == "skip":
        media = ""
    data = await state.get_data()
    eid = data.get("edit_event_id")
    if not eid:
        await message.answer("–û—à–∏–±–∫–∞: ID —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("UPDATE events SET title=%s, datetime=%s, description=%s, prize=%s, media=%s WHERE id = %s",
                (title, datetime_str, description, prize, media, eid))
            await conn.commit()
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì£ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"event_publish:{eid}"),
             InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", callback_data=f"event_delete:{eid}")]
        ])
        await message.answer("–°–æ–±—ã—Ç–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ.", reply_markup=kb)
        print(f"[Events] –°–æ–±—ã—Ç–∏–µ {eid} –æ–±–Ω–æ–≤–ª–µ–Ω–æ")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: <code>{e}</code>")
        print("[Events ERROR –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏]", e)
    finally:
        await state.clear()
        await safe_close(conn)

@router.callback_query(lambda q: q.data and q.data.startswith("event_publish:"))
async def event_publish_callback(query: types.CallbackQuery, state: FSMContext):
    eid_str = query.data.split(":", 1)[1]
    try:
        eid = int(eid_str)
    except ValueError:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    conn = await get_connection()
    try:
        async with conn.cursor(DictCursor) as cur:
            await cur.execute("SELECT * FROM events WHERE id = %s", (eid,))
            event = await cur.fetchone()
        if not event:
            await query.message.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return
        publish_text = f"üì¢ <b>–°–æ–±—ã—Ç–∏–µ!</b>\n\n<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> {event.get('title')}\n<b>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:</b> {event.get('datetime')}\n<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> {event.get('description')}\n<b>–ü—Ä–∏–∑:</b> {event.get('prize')}"
        if event.get("media"):
            try:
                sent = await query.bot.send_photo(PUBLISH_CHANNEL_ID, photo=event.get("media"), caption=publish_text, parse_mode="HTML")
                published = {str(PUBLISH_CHANNEL_ID): sent.message_id}
                print(f"[Events] –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ –≤ –∫–∞–Ω–∞–ª {PUBLISH_CHANNEL_ID} –∫–∞–∫ —Ñ–æ—Ç–æ")
            except Exception as pub_e:
                print(f"[Events] –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ñ–æ—Ç–æ: {pub_e}")
                try:
                    sent = await query.bot.send_message(PUBLISH_CHANNEL_ID, publish_text, parse_mode="HTML")
                    published = {str(PUBLISH_CHANNEL_ID): sent.message_id}
                    print(f"[Events] –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ –≤ –∫–∞–Ω–∞–ª {PUBLISH_CHANNEL_ID} –∫–∞–∫ —Ç–µ–∫—Å—Ç")
                except Exception as pub_e2:
                    print(f"[Events] –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞: {pub_e2}")
                    await query.message.answer(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª–µ: <code>{pub_e2}</code>")
                    return
        else:
            sent = await query.bot.send_message(PUBLISH_CHANNEL_ID, publish_text, parse_mode="HTML")
            published = {str(PUBLISH_CHANNEL_ID): sent.message_id}
            print(f"[Events] –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ –≤ –∫–∞–Ω–∞–ª {PUBLISH_CHANNEL_ID} –∫–∞–∫ —Ç–µ–∫—Å—Ç")
        async with conn.cursor() as cur:
            await cur.execute("UPDATE events SET published = %s WHERE id = %s", (json.dumps(published), eid))
            await conn.commit()
        await query.message.answer("–°–æ–±—ã—Ç–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª–µ.")
        print(f"[Events] –°–æ–±—ã—Ç–∏–µ {eid} –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ:", published)
    except Exception as e:
        await query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è: <code>{e}</code>")
        print("[Events ERROR –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏]", e)
    finally:
        await safe_close(conn)
        await query.answer()

@router.callback_query(lambda q: q.data and q.data.startswith("event_delete:"))
async def event_delete_callback(query: types.CallbackQuery, state: FSMContext):
    eid_str = query.data.split(":", 1)[1]
    try:
        eid = int(eid_str)
    except ValueError:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("DELETE FROM events WHERE id = %s", (eid,))
            await conn.commit()
        await query.message.answer("–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
        print(f"[Events] –°–æ–±—ã—Ç–∏–µ {eid} —É–¥–∞–ª–µ–Ω–æ")
    except Exception as e:
        await query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: <code>{e}</code>")
        print("[Events ERROR –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏]", e)
    finally:
        await safe_close(conn)
        await query.answer()

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
async def send_users_list_to_admin(dest_message: Message, state: FSMContext):
    print("[Users] –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    conn = await get_connection()
    try:
        data = await state.get_data()
        page = data.get("users_page", 1)
        per_page = 9
        offset = (page - 1) * per_page
        async with conn.cursor(DictCursor) as cur:
            await cur.execute("SELECT * FROM users ORDER BY tg_id DESC LIMIT %s OFFSET %s", (per_page, offset))
            users = await cur.fetchall()
        buttons = []
        if users:
            for user in users:
                tg_id = user.get("tg_id")
                full_name = user.get("full_name") or "-"
                username = user.get("username") or "-"
                rank = user.get("rank") or "-"
                internal_id = user.get("internal_id", "N/A")
                btn_text = f"{internal_id} ‚Ä¢ {full_name} (@{username}) | {rank}"
                buttons.append([InlineKeyboardButton(text=btn_text, callback_data=f"user_manage:{tg_id}")])
            if len(users) == per_page:
                buttons.append([InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="users_page:next")])
        else:
            buttons.append([InlineKeyboardButton(text="–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", callback_data="none")])
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        await dest_message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:", reply_markup=kb)
        print("[Users] –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        await dest_message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{e}</code>")
        print("[Users ERROR –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏]", e)
    finally:
        await safe_close(conn)

@router.callback_query(lambda q: q.data == "admin_users_list")
async def admin_users_list_callback(query: types.CallbackQuery, state: FSMContext):
    await send_users_list_to_admin(query.message, state)
    await query.answer()

@router.callback_query(lambda q: q.data and q.data.startswith("users_page:"))
async def users_page_nav(query: types.CallbackQuery, state: FSMContext):
    direction = query.data.split(":", 1)[1]
    data = await state.get_data()
    page = data.get("users_page", 1)
    page = page + 1 if direction == "next" else max(1, page - 1)
    await state.update_data(users_page=page)
    await send_users_list_to_admin(query.message, state)
    await query.answer()

@router.callback_query(lambda q: q.data and q.data.startswith("user_manage:"))
async def user_manage_callback(query: types.CallbackQuery, state: FSMContext):
    tg_id_str = query.data.split(":", 1)[1]
    try:
        tg_id = int(tg_id_str)
    except ValueError:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    conn = await get_connection()
    try:
        async with conn.cursor(DictCursor) as cur:
            await cur.execute("SELECT * FROM users WHERE tg_id = %s", (tg_id,))
            user = await cur.fetchone()
        if not user:
            await query.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        buttons = [
            [InlineKeyboardButton(text="üíé –í—ã–¥–∞—Ç—å –∞–ª–º–∞–∑—ã", callback_data=f"user_give:{tg_id}"),
             InlineKeyboardButton(text="üíé –ó–∞–±—Ä–∞—Ç—å –∞–ª–º–∞–∑—ã", callback_data=f"user_take:{tg_id}")],
            [InlineKeyboardButton(text="üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–∞–Ω–≥", callback_data=f"user_change_rank:{tg_id}")]
        ]
        if user.get("blocked"):
            buttons.append([InlineKeyboardButton(text="‚úÖ –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"user_toggle_block:{tg_id}")])
        else:
            buttons.append([InlineKeyboardButton(text="üö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"user_toggle_block:{tg_id}")])
        buttons.append([InlineKeyboardButton(text="‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="admin_users_list")])
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        details = (f"ID: {user.get('internal_id', 'N/A')}\n"
                   f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('full_name')} (@{user.get('username')})\n"
                   f"–†–∞–Ω–≥: {user.get('rank')}\n"
                   f"–ê–ª–º–∞–∑—ã: {user.get('balance', 0)}\n"
                   f"–°—Ç–∞—Ç—É—Å: {'–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω' if user.get('blocked') else '–ê–∫—Ç–∏–≤–µ–Ω'}")
        await query.message.answer(details, reply_markup=kb)
        await query.answer("–ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–∫—Ä—ã—Ç.")
    except Exception as e:
        await query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        print("[Users ERROR –ø—Ä–∏ –º–µ–Ω–µ–¥–∂–µ—Ä–µ]", e)
    finally:
        await safe_close(conn)

@router.callback_query(lambda q: q.data and (q.data.startswith("user_give:") or q.data.startswith("user_take:")))
async def user_diamonds_callback(query: types.CallbackQuery, state: FSMContext):
    action = "give" if query.data.startswith("user_give:") else "take"
    tg_id_str = query.data.split(":", 1)[1]
    try:
        tg_id = int(tg_id_str)
    except ValueError:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    await state.update_data(edit_user_id=tg_id, diamond_action=action)
    prompt = "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ üíé –¥–ª—è –≤—ã–¥–∞—á–∏:" if action == "give" else "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ üíé –¥–ª—è –∑–∞–±–æ—Ä–∞:"
    await query.message.answer(prompt)
    await state.set_state(DiamondsState.waiting_for_amount)
    await query.answer()

@router.message(DiamondsState.waiting_for_amount)
async def process_diamond_amount(message: Message, state: FSMContext):
    try:
        amount = int(message.text)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")
        return
    data = await state.get_data()
    tg_id = data.get("edit_user_id")
    action = data.get("diamond_action")
    if tg_id is None or action is None:
        await message.answer("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–ø–µ—Ä–∞—Ü–∏–∏.")
        await state.clear()
        return
    conn = await get_connection()
    try:
        if action == "give":
            query_str = "UPDATE users SET balance = balance + %s WHERE tg_id = %s"
        else:
            query_str = "UPDATE users SET balance = GREATEST(balance - %s, 0) WHERE tg_id = %s"
        async with conn.cursor() as cur:
            await cur.execute(query_str, (amount, tg_id))
            await conn.commit()
        await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        if action == "give":
            await message.bot.send_message(tg_id, f"‚ûï{amount} üíé.")
        else:
            await message.bot.send_message(tg_id, f"‚ûñ{amount} üíé.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–ª–º–∞–∑–æ–≤: {e}")
        print("[Users ERROR –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∞–ª–º–∞–∑–æ–≤]", e)
    finally:
        await state.clear()
        await safe_close(conn)

@router.callback_query(lambda q: q.data and q.data.startswith("user_change_rank:"))
async def user_change_rank_callback(query: types.CallbackQuery, state: FSMContext):
    tg_id_str = query.data.split(":", 1)[1]
    try:
        tg_id = int(tg_id_str)
    except ValueError:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    conn = await get_connection()
    try:
        async with conn.cursor(DictCursor) as cur:
            await cur.execute("SELECT * FROM users WHERE tg_id = %s", (tg_id,))
            user = await cur.fetchone()
        if not user:
            await query.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        details = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.get('full_name')} (@{user.get('username')})\n–¢–µ–∫—É—â–∏–π —Ä–∞–Ω–≥: {user.get('rank')}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–Ω–≥ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
        await query.message.answer(details)
        await state.update_data(edit_user_id=tg_id)
        await state.set_state(UserEditState.waiting_for_new_rank)
        await query.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–Ω–≥.")
    except Exception as e:
        await query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        print("[Users ERROR –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–∞–Ω–≥–∞]", e)
    finally:
        await safe_close(conn)

@router.message(UserEditState.waiting_for_new_rank)
async def process_user_edit(message: Message, state: FSMContext):
    new_rank = message.text.strip()
    data = await state.get_data()
    tg_id = data.get("edit_user_id")
    if not tg_id:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.clear()
        return
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("UPDATE users SET `rank` = %s WHERE tg_id = %s", (new_rank, tg_id))
            await conn.commit()
        await message.answer("–†–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª—ë–Ω.")
        print(f"[Users] –†–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞: {new_rank}")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        print("[Users ERROR –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏]", e)
    finally:
        await state.clear()
        await safe_close(conn)

@router.callback_query(lambda q: q.data and q.data.startswith("user_toggle_block:"))
async def user_toggle_block_callback(query: types.CallbackQuery, state: FSMContext):
    tg_id_str = query.data.split(":", 1)[1]
    try:
        tg_id = int(tg_id_str)
    except ValueError:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    conn = await get_connection()
    try:
        async with conn.cursor(DictCursor) as cur:
            await cur.execute("SELECT blocked FROM users WHERE tg_id = %s", (tg_id,))
            result = await cur.fetchone()
        if result is None:
            await query.message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        current_status = result[0]
        new_status = not current_status
        async with conn.cursor() as cur:
            await cur.execute("UPDATE users SET blocked = %s WHERE tg_id = %s", (new_status, tg_id))
            await conn.commit()
        status_text = "–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω" if new_status else "–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        await query.message.answer(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å {status_text}.")
        print(f"[Users] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {tg_id} —Ç–µ–ø–µ—Ä—å {status_text}.")
        await query.answer()
    except Exception as e:
        await query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        print("[Users ERROR –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ]", e)
    finally:
        await safe_close(conn)

# –û–±—ä—è–≤–ª–µ–Ω–∏—è
@router.callback_query(lambda q: q.data == "admin_broadcast")
async def broadcast_init(query: types.CallbackQuery, state: FSMContext):
    await query.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ. –û–Ω–æ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –≥–æ–ª–æ—Å–æ–≤—É—é –∑–∞–ø–∏—Å—å –∏ —Ç.–ø."
    )
    await state.set_state(BroadcastState.waiting_for_broadcast_message)
    await query.answer("–û–∂–∏–¥–∞–µ—Ç—Å—è –æ–±—ä—è–≤–ª–µ–Ω–∏–µ.")

@router.message(BroadcastState.waiting_for_broadcast_message)
async def process_broadcast(message: Message, state: FSMContext):
    conn = await get_connection()
    try:
        async with conn.cursor(DictCursor) as cur:
            await cur.execute("SELECT tg_id FROM users")
            users = await cur.fetchall()
            
        for user in users:
            try:
                await message.bot.copy_message(
                    chat_id=user["tg_id"],
                    from_chat_id=message.chat.id,
                    message_id=message.message_id
                )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user['tg_id']}: {e}")
        await message.answer("–û–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è: {e}")
    finally:
        await state.clear()
        await safe_close(conn)
