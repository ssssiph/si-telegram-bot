from aiogram import Router, F, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import get_connection

router = Router()

# ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (—Ç–æ—Ç, –∫—Ç–æ –∏–º–µ–µ—Ç –ø—Ä–∞–≤–æ –æ—Ç–≤–µ—á–∞—Ç—å)
ADMIN_ID = 1016554091

# –ù–æ–≤—ã–π state –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
class ContactReplyState(StatesGroup):
    waiting_for_reply = State()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–∫–∞–∑–∞ —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π.
# –û–ë–†–ê–¢–ò–¢–ï –í–ù–ò–ú–ê–ù–ò–ï: —ç—Ç–∞ –∫–Ω–æ–ø–∫–∞ (–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–º –º–µ–Ω—é) —Ç–µ–ø–µ—Ä—å –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è "–°–≤—è–∑—å"
@router.message(lambda message: message.text is not None and message.text.strip() == "–°–≤—è–∑—å")
async def admin_contacts_list(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äì –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (—Ä–∞–Ω–≥ "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä")
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("SELECT `rank` FROM users WHERE tg_id = %s", (message.from_user.id,))
            result = await cur.fetchone()
            if not result:
                await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return
            rank = result[0]
        if rank != "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä":
            await message.answer("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ.")
            return

        # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1
        page = 1
        data = await state.get_data()
        if "contacts_page" in data:
            page = data["contacts_page"]

        contacts_per_page = 9  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º 9 –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        offset = (page - 1) * contacts_per_page

        conn2 = await get_connection()
        async with conn2.cursor(dictionary=True) as cur:
            await cur.execute("SELECT * FROM contacts WHERE answered = FALSE ORDER BY created_at DESC LIMIT %s OFFSET %s", (contacts_per_page, offset))
            contacts = await cur.fetchall()
        await conn2.close()

        if not contacts:
            await message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.")
            return

        # –°—Ç—Ä–æ–∏–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É: –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –Ω–∞ –∑–∞–ø—Ä–æ—Å
        kb_buttons = []
        for contact in contacts:
            # –§–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏: "<–∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è> (<—é–∑–µ—Ä–Ω–µ–π–º> –∏–ª–∏ '-' –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç | –∞–π–¥–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è)"
            user_display = contact['full_name'] if contact['full_name'] and contact['full_name'].strip() else "-"
            username_display = f"@{contact['username']}" if contact['username'] and contact['username'].strip() else "-"
            button_text = f"{user_display} ({username_display} | {contact['id']})"
            callback_data = f"contact_reply:{contact['id']}"
            kb_buttons.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
        
        # –ï—Å–ª–∏ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ä–æ–≤–Ω–æ contacts_per_page, –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"
        if len(contacts) == contacts_per_page:
            kb_buttons.append([InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="contacts_page:next")])
        
        inline_kb = InlineKeyboardMarkup(inline_keyboard=kb_buttons)
        await message.answer("–û–±—Ä–∞—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:", reply_markup=inline_kb)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π: <code>{e}</code>")
    finally:
        conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π
@router.callback_query(lambda query: query.data and query.data.startswith("contacts_page:"))
async def contacts_page_callback(query: types.CallbackQuery, state: FSMContext):
    direction = query.data.split(":", 1)[1]
    data = await state.get_data()
    page = data.get("contacts_page", 1)
    if direction == "next":
        page += 1
    else:
        page = max(1, page - 1)
    await state.update_data(contacts_page=page)
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –æ–±—Ä–∞—â–µ–Ω–∏–π
    await query.message.edit_reply_markup()  # —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä—ã–µ –∫–Ω–æ–ø–∫–∏
    await admin_contacts_list(query.message, state)
    await query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è
@router.callback_query(lambda query: query.data and query.data.startswith("contact_reply:"))
async def contact_reply_callback(query: types.CallbackQuery, state: FSMContext):
    contact_id_str = query.data.split(":", 1)[1]
    try:
        contact_id = int(contact_id_str)
    except ValueError:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –æ–±—Ä–∞—â–µ–Ω–∏—è –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ –æ—Ç–≤–µ—Ç–∞
    await state.update_data(contact_reply_id=contact_id)
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è:")
    await ContactReplyState.waiting_for_reply.set()
    await query.answer("–û–∂–∏–¥–∞–µ—Ç—Å—è –≤–∞—à –æ—Ç–≤–µ—Ç.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫, –ø–æ–ª—É—á–∞—é—â–∏–π –æ—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
@router.message(ContactReplyState.waiting_for_reply)
async def process_contact_reply(message: Message, state: FSMContext):
    data = await state.get_data()
    if "contact_reply_id" not in data:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.")
        await state.clear()
        return
    contact_id = data["contact_reply_id"]
    conn = await get_connection()
    try:
        async with conn.cursor(dictionary=True) as cur:
            await cur.execute("SELECT * FROM contacts WHERE id = %s", (contact_id,))
            contact = await cur.fetchone()
            if not contact:
                await message.answer("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                await state.clear()
                return
            # –ü–æ–º–µ—á–∞–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–≤–µ—á–µ–Ω–Ω–æ–µ
            await cur.execute("UPDATE contacts SET answered = TRUE WHERE id = %s", (contact_id,))
        target_user_id = contact['tg_id']
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ—Ç–≤–µ—Ç ‚Äì —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.bot.send_message(target_user_id, f"üì® –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n{message.text}")
        await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        print(f"[ADMIN REPLY] –û—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ {contact_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞: <code>{e}</code>")
        print("[ADMIN REPLY ERROR]", e)
    finally:
        await state.clear()
        await conn.close()
