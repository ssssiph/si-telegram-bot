import os
import json
from aiogram import Router, types, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, InputMediaPhoto, InputMediaVideo, InputMediaAudio
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiomysql import DictCursor
from database import get_connection

router = Router()

ADMIN_ID = 1016554091
PUBLISH_CHANNEL_ID = -1002292957980

async def safe_close(conn):
    if conn:
        try:
            ret = conn.close()
            if ret is not None and hasattr(ret, '__await__'):
                await ret
        except Exception as ex:
            print("safe_close error:", ex)

class BroadcastState(StatesGroup):
    waiting_for_broadcast_message = State()

class ContactReplyState(StatesGroup):
    waiting_for_reply = State()

class EventCreation(StatesGroup):
    waiting_for_title = State()
    waiting_for_datetime = State()
    waiting_for_description = State()
    waiting_for_prize = State()
    waiting_for_media = State()

class EventEditState(StatesGroup):
    waiting_for_edit_details = State()

class UserEditState(StatesGroup):
    waiting_for_new_rank = State()

class DiamondsState(StatesGroup):
    waiting_for_amount = State()

class PromoCreationState(StatesGroup):
    waiting_for_promo_details = State()


async def is_user_blocked(user_id: int) -> bool:
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("SELECT blocked FROM users WHERE tg_id = %s", (user_id,))
            result = await cur.fetchone()
            return bool(result[0]) if result is not None else False
    except Exception as e:
        print("Error in is_user_blocked:", e)
        return False
    finally:
        await safe_close(conn)

@router.message(lambda m: m.chat.type == "private" and m.from_user.id != ADMIN_ID)
async def handle_incoming_contact(m: Message, state: FSMContext):
    if await state.get_state() is not None:
        return
    if await is_user_blocked(m.from_user.id):
        await m.answer("üö´ –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ.")
        return
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("SELECT `rank` FROM users WHERE tg_id = %s", (m.from_user.id,))
            result = await cur.fetchone()
        if result is None or result[0] == "–ì–æ—Å—Ç—å":
            await m.answer("üö´ –û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ.")
            return
        sender_info = f"{m.from_user.full_name} (@{m.from_user.username})" if m.from_user.username else m.from_user.full_name
        content = ""
        if m.text:
            content = m.text
        elif m.media_group_id:
            content = f"[–ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞: {m.media_group_id}] –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_info}"
        elif m.photo:
            content = f"[–§–æ—Ç–æ] –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_info}"
        elif m.video:
            content = f"[–í–∏–¥–µ–æ] –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_info}"
        elif m.audio:
            content = f"[–ê—É–¥–∏–æ] –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_info}"
        elif m.voice:
            content = f"[–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ] –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_info}"
        else:
            content = f"[–î—Ä—É–≥–æ–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞] –û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å: {sender_info}"

        async with conn.cursor() as cur:
            await cur.execute("INSERT INTO contacts (tg_id, full_name, username, message, answered) VALUES (%s, %s, %s, %s, %s)", (m.from_user.id, m.from_user.full_name, m.from_user.username, content, False))
            await conn.commit()
        await m.answer("–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ.")
    except Exception as e:
        await m.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è.")
        print("Error in handle_incoming_contact:", e)
    finally:
        conn.close()

@router.message(lambda message: message.text and message.text.strip().lower() == "‚öôÔ∏è —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
async def admin_panel(message: Message, state: FSMContext):
    await state.clear()
    print("[Admin] –ó–∞–ø—É—Å–∫ –ø–∞–Ω–µ–ª–∏ –¥–ª—è", message.from_user.id)
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("SELECT `rank` FROM users WHERE tg_id = %s", (message.from_user.id,))
            result = await cur.fetchone()
            if not result:
                await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return
            user_rank = result[0]
        if user_rank != "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä":
            await message.answer("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ.")
            return
        kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì• –û–±—Ä–∞—â–µ–Ω–∏—è", callback_data="admin_contacts_list")],
            [InlineKeyboardButton(text="üìÖ –°–æ–±—ã—Ç–∏—è", callback_data="admin_events_list")],
            [InlineKeyboardButton(text="üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="admin_users_list")],
            [InlineKeyboardButton(text="üì¢ –û–±—ä—è–≤–ª–µ–Ω–∏—è", callback_data="admin_broadcast")],
            [InlineKeyboardButton(text="üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥—ã", callback_data="admin_promo_list")] # –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–ü—Ä–æ–º–æ–∫–æ–¥—ã"
        ])
        await message.answer("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=kb)
        print("[Admin] –ú–µ–Ω—é –≤—ã–≤–µ–¥–µ–Ω–æ")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:\n<code>{e}</code>")
        print("[Admin ERROR]", e)
    finally:
        await safe_close(conn)

# –û–±—Ä–∞—â–µ–Ω–∏—è
async def send_contacts_list_to_admin(dest_message: Message, state: FSMContext):
    print("[Contacts] –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π")
    conn = await get_connection()
    try:
        data = await state.get_data()
        page = data.get("contacts_page", 1)
        per_page = 9
        offset = (page - 1) * per_page
        async with conn.cursor(DictCursor) as cur:
            await cur.execute("SELECT c.*, u.username AS sender_username, u.full_name AS sender_full_name FROM contacts c LEFT JOIN users u ON c.tg_id = u.tg_id WHERE answered = FALSE ORDER BY created_at DESC LIMIT %s OFFSET %s", (per_page, offset))
            contacts = await cur.fetchall()
        if not contacts:
            await dest_message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.")
            return
        buttons = []
        for contact in contacts:
            cid = contact.get("id")
            full_name = contact.get("sender_full_name") or "-"
            username = contact.get("sender_username") or "-"
            created_at = contact.get("created_at")
            date_str = str(created_at) if created_at else ""
            btn_text = f"{full_name} (@{username} | {cid}) {date_str}"
            buttons.append([InlineKeyboardButton(text=btn_text, callback_data=f"contact_reply:{cid}")])
        if len(contacts) == per_page:
            buttons.append([InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="contacts_page:next")])
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        await dest_message.answer("–û–±—Ä–∞—â–µ–Ω–∏—è:", reply_markup=kb)
        print("[Contacts] –°–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        await dest_message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π: <code>{e}</code>")
        print("[Contacts ERROR]", e)
    finally:
        await safe_close(conn)

@router.callback_query(lambda q: q.data == "admin_contacts_list")
async def admin_contacts_list_callback(query: types.CallbackQuery, state: FSMContext):
    await send_contacts_list_to_admin(query.message, state)
    await query.answer()

@router.callback_query(lambda q: q.data and q.data.startswith("contacts_page:"))
async def contacts_page_nav(query: types.CallbackQuery, state: FSMContext):
    direction = query.data.split(":", 1)[1]
    data = await state.get_data()
    page = data.get("contacts_page", 1)
    page = page + 1 if direction == "next" else max(1, page - 1)
    await state.update_data(contacts_page=page)
    await send_contacts_list_to_admin(query.message, state)
    await query.answer()

@router.callback_query(lambda q: q.data and q.data.startswith("contact_reply:"))
async def contact_reply_select(query: types.CallbackQuery, state: FSMContext):
    cid_str = query.data.split(":", 1)[1]
    try:
        cid = int(cid_str)
    except ValueError:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    await state.update_data(contact_reply_id=cid)
    conn = await get_connection()
    try:
        async with conn.cursor(DictCursor) as cur:
            await cur.execute("SELECT c.*, u.username AS sender_username, u.full_name AS sender_full_name FROM contacts c LEFT JOIN users u ON c.tg_id = u.tg_id WHERE c.id = %s", (cid,))
            contact = await cur.fetchone()
        if contact:
            sender_info = f"{contact.get('sender_full_name','-')}" + (f" (@{contact.get('sender_username','-')})" if contact.get("sender_username") else "")
            original_text = contact.get("message")
            if original_text.startswith("[–ú–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞:"):
                await query.message.answer(f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_info}:\n\n{original_text}\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")
            elif original_text.startswith("[–§–æ—Ç–æ]"):
                await query.message.answer(f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_info}:\n\n{original_text}\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")
            elif original_text.startswith("[–í–∏–¥–µ–æ]"):
                await query.message.answer(f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_info}:\n\n{original_text}\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")
            elif original_text.startswith("[–ê—É–¥–∏–æ]"):
                await query.message.answer(f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_info}:\n\n{original_text}\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")
            elif original_text.startswith("[–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ]"):
                await query.message.answer(f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_info}:\n\n{original_text}\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")
            else:
                await query.message.answer(f"‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {sender_info}:\n\n{original_text}\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:")
        else:
            await query.message.answer("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    except Exception as e:
        await query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è: <code>{e}</code>")
        print("[Contacts ERROR]", e)
    finally:
        await safe_close(conn)
    await state.set_state(ContactReplyState.waiting_for_reply)
    await query.answer("–û–∂–∏–¥–∞–µ—Ç—Å—è –≤–∞—à –æ—Ç–≤–µ—Ç.")

@router.message(ContactReplyState.waiting_for_reply)
async def process_contact_reply(message: Message, state: FSMContext):
    data = await state.get_data()
    cid = data.get("contact_reply_id")
    if not cid:
        await message.answer("–û—à–∏–±–∫–∞: –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ.")
        await state.clear()
        return
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("UPDATE contacts SET answered = TRUE WHERE id = %s", (cid,))
            await conn.commit()
        async with conn.cursor(DictCursor) as cur:
            await cur.execute("SELECT c.*, u.username AS sender_username, u.full_name AS sender_full_name FROM contacts c LEFT JOIN users u ON c.tg_id = u.tg_id WHERE c.id = %s", (cid,))
            contact = await cur.fetchone()
        if not contact:
            await message.answer("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            await state.clear()
            return
        target_id = contact.get("tg_id")
        if not target_id:
            await message.answer("–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç tg_id.")
            await state.clear()
            return
        sender_info = f"{contact.get('sender_full_name','-')}" + (f" (@{contact.get('sender_username','-')})" if contact.get("sender_username") else "")
        original_text = contact.get("message")
        header = f"–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç {sender_info}:\n\n{original_text}\n\n–û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:"
        if message.content_type == "text":
            await message.bot.send_message(target_id, header + "\n\n" + message.text)
        elif message.photo:
            await message.bot.send_photo(target_id, message.photo[-1].file_id, caption=header + "\n\n–û—Ç–≤–µ—Ç –Ω–∏–∂–µ:")
        elif message.video:
            await message.bot.send_video(target_id, message.video.file_id, caption=header + "\n\n–û—Ç–≤–µ—Ç –Ω–∏–∂–µ:")
        elif message.audio:
            await message.bot.send_audio(target_id, message.audio.file_id, caption=header + "\n\n–û—Ç–≤–µ—Ç –Ω–∏–∂–µ:")
        elif message.voice:
            await message.bot.send_voice(target_id, message.voice.file_id, caption=header + "\n\n–û—Ç–≤–µ—Ç –Ω–∏–∂–µ:")
        else:
            await message.bot.send_message(target_id, header + "\n\n–û—Ç–≤–µ—Ç –Ω–∏–∂–µ:")
            await message.bot.copy_message(chat_id=target_id, from_chat_id=message.chat.id, message_id=message.message_id)
        await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: <code>{e}</code>")
        print("[Contacts ERROR –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ]", e)
    finally:
        await state.clear()
        await safe_close(conn)
        await send_contacts_list_to_admin(message, state)

# –°–æ–±—ã—Ç–∏—è
async def send_events_list_to_admin(dest_message: Message, state: FSMContext):
    print("[Events] –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π")
    conn = await get_connection()
    try:
        data = await state.get_data()
        page = data.get("events_page", 1)
        per_page = 9
        offset = (page - 1) * per_page
        async with conn.cursor(DictCursor) as cur:
            await cur.execute("SELECT * FROM events ORDER BY datetime DESC LIMIT %s OFFSET %s", (per_page, offset))
            events = await cur.fetchall()
        buttons = []
        buttons.append([InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", callback_data="event_create")])
        if events:
            for event in events:
                title = event.get("title") or "-"
                datetime_str = event.get("datetime") or "-"
                eid = event.get("id")
                btn_text = f"{title} | {datetime_str}"
                buttons.append([InlineKeyboardButton(text=btn_text, callback_data=f"event_edit:{eid}")])
            if len(events) == per_page:
                buttons.append([InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="events_page:next")])
        else:
            buttons.append([InlineKeyboardButton(text="–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π", callback_data="none")])
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        await dest_message.answer("–°–æ–±—ã—Ç–∏—è:", reply_markup=kb)
        print("[Events] –°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        await dest_message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–±—ã—Ç–∏–π: <code>{e}</code>")
        print("[Events ERROR –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏]", e)
    finally:
        await safe_close(conn)

@router.callback_query(lambda q: q.data == "admin_events_list")
async def admin_events_list_callback(query: types.CallbackQuery, state: FSMContext):
    await send_events_list_to_admin(query.message, state)
    await query.answer()

@router.callback_query(lambda q: q.data and q.data.startswith("events_page:"))
async def events_page_nav(query: types.CallbackQuery, state: FSMContext):
    direction = query.data.split(":", 1)[1]
    data = await state.get_data()
    page = data.get("events_page", 1)
    page = page + 1 if direction == "next" else max(1, page - 1)
    await state.update_data(events_page=page)
    await send_events_list_to_admin(query.message, state)
    await query.answer()

@router.callback_query(lambda q: q.data == "event_create")
async def event_create_callback(query: types.CallbackQuery, state: FSMContext):
    print("[Events] –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è")
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
    await state.set_state(EventCreation.waiting_for_title)
    await query.answer()

@router.message(EventCreation.waiting_for_title)
async def process_event_title(message: Message, state: FSMContext):
    await state.update_data(event_title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è —Å–æ–±—ã—Ç–∏—è:")
    await state.set_state(EventCreation.waiting_for_datetime)
    print("[Events] –ù–∞–∑–≤–∞–Ω–∏–µ:", message.text)

@router.message(EventCreation.waiting_for_datetime)
async def process_event_datetime(message: Message, state: FSMContext):
    await state.update_data(event_datetime=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
    await state.set_state(EventCreation.waiting_for_description)
    print("[Events] –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è:", message.text)

@router.message(EventCreation.waiting_for_description)
async def process_event_description(message: Message, state: FSMContext):
    await state.update_data(event_description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–∑ –∑–∞ —É—á–∞—Å—Ç–∏–µ/–ø–æ–±–µ–¥—É:")
    await state.set_state(EventCreation.waiting_for_prize)
    print("[Events] –û–ø–∏—Å–∞–Ω–∏–µ:", message.text)

@router.message(EventCreation.waiting_for_prize)
async def process_event_prize(message: Message, state: FSMContext):
    await state.update_data(event_prize=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–≥–∏—Ñ):")
    await state.set_state(EventCreation.waiting_for_media)
    print("[Events] –ü—Ä–∏–∑:", message.text)

@router.message(EventCreation.waiting_for_media, content_types=types.ContentType.ANY)
async def process_event_media(message: Message, state: FSMContext):
    if message.photo:
        await state.update_data(event_media=message.photo[-1].file_id, event_media_type="photo")
    elif message.video:
        await state.update_data(event_media=message.video.file_id, event_media_type="video")
    elif message.animation:
        await state.update_data(event_media=message.animation.file_id, event_media_type="animation")
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –º–µ–¥–∏–∞. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ –∏–ª–∏ GIF.")
        return
    data = await state.get_data()
    event_title = data.get("event_title")
    event_datetime = data.get("event_datetime")
    event_description = data.get("event_description")
    event_prize = data.get("event_prize")
    event_media = data.get("event_media")
    event_media_type = data.get("event_media_type")
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute(
                "INSERT INTO events (title, description, prize, datetime, media, creator_id, published) VALUES (%s, %s, %s, %s, %s, %s, %s)",
                (event_title, event_description, event_prize, event_datetime, event_media, message.from_user.id, json.dumps({"published": False}))
            )
            await conn.commit()
        await message.answer("–°–æ–±—ã—Ç–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. /publish –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
        print("[Events] –°–æ–±—ã—Ç–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: <code>{e}</code>")
        print("[Events ERROR]", e)
    finally:
        await state.clear()
        await safe_close(conn)

@router.message(lambda message: message.text and message.text.strip().lower() == "/publish")
async def publish_event(message: Message):
    conn = await get_connection()
    try:
        async with conn.cursor(DictCursor) as cur:
            await cur.execute("SELECT * FROM events WHERE published = %s", (json.dumps({"published": False}),))
            event = await cur.fetchone()
        if not event:
            await message.answer("–ù–µ—Ç –Ω–µ–æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
            return
        event_id = event.get("id")
        title = event.get("title")
        description = event.get("description")
        prize = event.get("prize")
        datetime_str = event.get("datetime")
        media = event.get("media")
        media_type = event.get("media_type")
        text = f"<b>{title}</b>\n\n{description}\n\n–ü—Ä–∏–∑: {prize}\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {datetime_str}"
        if media:
            if media_type == "photo":
                await message.bot.send_photo(chat_id=PUBLISH_CHANNEL_ID, photo=media, caption=text)
            elif media_type == "video":
                await message.bot.send_video(chat_id=PUBLISH_CHANNEL_ID, video=media, caption=text)
            elif media_type == "animation":
                await message.bot.send_animation(chat_id=PUBLISH_CHANNEL_ID, animation=media, caption=text)
        else:
            await message.bot.send_message(chat_id=PUBLISH_CHANNEL_ID, text=text)
        async with conn.cursor() as cur:
            await cur.execute("UPDATE events SET published = %s WHERE id = %s", (json.dumps({"published": True}), event_id))
            await conn.commit()
        await message.answer("–°–æ–±—ã—Ç–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ.")
        print("[Events] –°–æ–±—ã—Ç–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: <code>{e}</code>")
        print("[Events ERROR]", e)
    finally:
        await safe_close(conn)

@router.callback_query(lambda q: q.data and q.data.startswith("event_edit:"))
async def event_edit_callback(query: types.CallbackQuery, state: FSMContext):
    event_id = int(query.data.split(":")[1])
    await state.update_data(event_id=event_id)
    await state.set_state(EventEditState.waiting_for_edit_details)
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ–±—ã—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ | –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è | –û–ø–∏—Å–∞–Ω–∏–µ | –ü—Ä–∏–∑")
    await query.answer()

@router.message(EventEditState.waiting_for_edit_details)
async def process_event_edit(message: Message, state: FSMContext):
    new_data = message.text.split("|")
    if len(new_data) != 4:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return
    new_title, new_datetime, new_description, new_prize = [s.strip() for s in new_data]
    event_id = (await state.get_data()).get("event_id")
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute(
                "UPDATE events SET title = %s, datetime = %s, description = %s, prize = %s WHERE id = %s",
                (new_title, new_datetime, new_description, new_prize, event_id)
            )
            await conn.commit()
        await message.answer("–î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã.")
        print("[Events] –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: <code>{e}</code>")
        print("[Events ERROR]", e)
    finally:
        await state.clear()
        await safe_close(conn)

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
async def send_users_list_to_admin(dest_message: Message, state: FSMContext):
    print("[Users] –ó–∞–ø—Ä–æ—Å —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    conn = await get_connection()
    try:
        data = await state.get_data()
        page = data.get("users_page", 1)
        per_page = 9
        offset = (page - 1) * per_page
        async with conn.cursor(DictCursor) as cur:
            await cur.execute("SELECT * FROM users ORDER BY created_at DESC LIMIT %s OFFSET %s", (per_page, offset))
            users = await cur.fetchall()
        buttons = []
        for user in users:
            tg_id = user.get("tg_id")
            full_name = user.get("full_name") or "-"
            username = user.get("username") or "-"
            rank = user.get("rank") or "–ì–æ—Å—Ç—å"
            btn_text = f"{full_name} (@{username} | {rank})"
            buttons.append([InlineKeyboardButton(text=btn_text, callback_data=f"user_edit:{tg_id}")])
        if len(users) == per_page:
            buttons.append([InlineKeyboardButton(text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="users_page:next")])
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        await dest_message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:", reply_markup=kb)
        print("[Users] –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
    except Exception as e:
        await dest_message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{e}</code>")
        print("[Users ERROR]", e)
    finally:
        await safe_close(conn)

@router.callback_query(lambda q: q.data == "admin_users_list")
async def admin_users_list_callback(query: types.CallbackQuery, state: FSMContext):
    await send_users_list_to_admin(query.message, state)
    await query.answer()

@router.callback_query(lambda q: q.data and q.data.startswith("users_page:"))
async def users_page_nav(query: types.CallbackQuery, state: FSMContext):
    direction = query.data.split(":", 1)[1]
    data = await state.get_data()
    page = data.get("users_page", 1)
    page = page + 1 if direction == "next" else max(1, page - 1)
    await state.update_data(users_page=page)
    await send_users_list_to_admin(query.message, state)
    await query.answer()

@router.callback_query(lambda q: q.data and q.data.startswith("user_edit:"))
async def user_edit_callback(query: types.CallbackQuery, state: FSMContext):
    tg_id = int(query.data.split(":")[1])
    await state.update_data(edit_user_id=tg_id)
    await state.set_state(UserEditState.waiting_for_new_rank)
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–∞–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:")
    await query.answer()

@router.message(UserEditState.waiting_for_new_rank)
async def process_user_edit(message: Message, state: FSMContext):
    new_rank = message.text.strip()
    user_id = (await state.get_data()).get("edit_user_id")
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("UPDATE users SET `rank` = %s WHERE tg_id = %s", (new_rank, user_id))
            await conn.commit()
        await message.answer("–†–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω.")
        print("[Users] –†–∞–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞–Ω–≥–∞: <code>{e}</code>")
        print("[Users ERROR]", e)
    finally:
        await state.clear()
        await safe_close(conn)

# –†–∞—Å—Å—ã–ª–∫–∞
@router.callback_query(lambda q: q.data == "admin_broadcast")
async def admin_broadcast_callback(query: types.CallbackQuery, state: FSMContext):
    await state.set_state(BroadcastState.waiting_for_broadcast_message)
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await query.answer()

@router.message(BroadcastState.waiting_for_broadcast_message)
async def process_broadcast_message(message: Message, state: FSMContext):
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("SELECT tg_id FROM users")
            user_ids = await cur.fetchall()
        if not user_ids:
            await message.answer("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.")
            await state.clear()
            return
        for user_id in user_ids:
            try:
                if message.content_type == "text":
                    await message.bot.send_message(user_id[0], message.text)
                elif message.photo:
                    await message.bot.send_photo(user_id[0], message.photo[-1].file_id, caption=message.caption)
                elif message.video:
                    await message.bot.send_video(user_id[0], message.video.file_id, caption=message.caption)
                elif message.audio:
                    await message.bot.send_audio(user_id[0], message.audio.file_id, caption=message.caption)
                elif message.voice:
                    await message.bot.send_voice(user_id[0], message.voice.file_id, caption=message.caption)
                else:
                    await message.bot.send_message(user_id[0], "–†–∞—Å—Å—ã–ª–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id[0]}: {e}")
        await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        print("[Broadcast] –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—Å—ã–ª–∫–µ: <code>{e}</code>")
        print("[Broadcast ERROR]", e)
    finally:
        await state.clear()
        await safe_close(conn)

# –ü—Ä–æ–º–æ–∫–æ–¥—ã - –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@router.callback_query(lambda q: q.data == "admin_promo_list")
async def admin_promo_list(query: types.CallbackQuery, state: FSMContext):
    conn = await get_connection()
    try:
        async with conn.cursor(DictCursor) as cur:
            await cur.execute("SELECT * FROM promo_codes")
            promo_codes = await cur.fetchall()
        promo_list_text = "–¢–µ–∫—É—â–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:\n"
        if promo_codes:
            for promo in promo_codes:
                promo_list_text += f"{promo['code']} | {promo['reward']}\n"
        else:
            promo_list_text = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤.\n"
        await query.message.answer(f"{promo_list_text}\n–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –Ω–∞–≥—Ä–∞–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n–ù–∞–∑–≤–∞–Ω–∏–µ | –ù–∞–≥—Ä–∞–¥–∞\n\n–ù–∞–ø—Ä–∏–º–µ—Ä: example | 100")
        await state.set_state(PromoCreationState.waiting_for_promo_details)
    except Exception as e:
        await query.message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {e}")
        print("[Promo ERROR]", e)
    finally:
        await safe_close(conn)
    await query.answer()

@router.message(PromoCreationState.waiting_for_promo_details)
async def process_promo_creation(message: Message, state: FSMContext):
    try:
        code, reward_str = message.text.split("|")
        code = code.strip()
        reward = int(reward_str.strip())
        if not code or reward <= 0:
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ù–∞–∑–≤–∞–Ω–∏–µ | –ù–∞–≥—Ä–∞–¥–∞', –Ω–∞–ø—Ä–∏–º–µ—Ä: example | 100")
            return
    except ValueError:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ '–ù–∞–∑–≤–∞–Ω–∏–µ | –ù–∞–≥—Ä–∞–¥–∞', –Ω–∞–ø—Ä–∏–º–µ—Ä: example | 100")
        return

    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("INSERT INTO promo_codes (code, reward) VALUES (%s, %s)", (code, reward))
            await conn.commit()
        await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ '{code}' —Å –Ω–∞–≥—Ä–∞–¥–æ–π {reward} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
        print("[Promo ERROR]", e)
    finally:
        await state.clear()
        await safe_close(conn)
