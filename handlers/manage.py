import re
from aiogram import Router, F, types
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiomysql import DictCursor  # –∏—Å–ø–æ–ª—å–∑—É–µ–º DictCursor –≤–º–µ—Å—Ç–æ dictionary=True
from database import get_connection

router = Router()
ADMIN_ID = 1016554091  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

# ---------------------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ" –∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
# ---------------------------------------------
@router.message(lambda message: message.text is not None and message.text.strip() == "‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
async def admin_panel(message: Message, state: FSMContext):
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("SELECT `rank` FROM users WHERE tg_id = %s", (message.from_user.id,))
            result = await cur.fetchone()
            if not result:
                await message.answer("‚ùó –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –û—Ç–ø—Ä–∞–≤—å—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
                return
            user_rank = result[0]
        if user_rank != "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä":
            await message.answer("–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ.")
            return
        # –§–æ—Ä–º–∏—Ä—É–µ–º inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω–ø–∞–Ω–µ–ª–∏ ‚Äì –æ–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–°–≤—è–∑—å"
        inline_kb = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–°–≤—è–∑—å", callback_data="admin_contacts_list")]
        ])
        await message.answer("–¢–µ—Å—Ç–∏–∫", reply_markup=inline_kb)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –≤ –∞–¥–º–∏–Ω–∫–µ:\n<code>{e}</code>")
    finally:
        if conn:
            await conn.close()

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
async def send_contacts_list_to_admin(dest_message: Message, state: FSMContext):
    conn = await get_connection()
    try:
        data = await state.get_data()
        page = data.get("contacts_page", 1)
        contacts_per_page = 9
        offset = (page - 1) * contacts_per_page

        async with conn.cursor(DictCursor) as cur:
            await cur.execute(
                "SELECT * FROM contacts WHERE answered = FALSE ORDER BY created_at DESC LIMIT %s OFFSET %s",
                (contacts_per_page, offset)
            )
            contacts = await cur.fetchall()
        if not contacts:
            await dest_message.answer("–ù–µ—Ç –Ω–æ–≤—ã—Ö –æ–±—Ä–∞—â–µ–Ω–∏–π.")
            return

        buttons = []
        for contact in contacts:
            full_name = (contact.get("full_name") or "-").strip()
            username = f"@{contact.get('username')}" if contact.get("username") and contact.get("username").strip() else "-"
            contact_id = contact.get("id")
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏–∑ created_at; –µ—Å–ª–∏ –æ–Ω–∞ —É–∂–µ —Å—Ç—Ä–æ–∫–∞, –º–æ–∂–Ω–æ –≤—ã–≤–µ—Å—Ç–∏ –∫–∞–∫ –µ—Å—Ç—å
            created_at = contact.get("created_at")
            # –î–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã –≤—ã–≤–æ–¥–∏–º –¥–∞—Ç—É –∫–∞–∫ str; –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å datetime.strftime
            date_str = str(created_at) if created_at else ""
            # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –ø–æ—Å–ª–µ —Å–∫–æ–±–æ–∫
            button_text = f"{full_name} ({username} | {contact_id}) {date_str}"
            callback_data = f"contact_reply:{contact_id}"
            buttons.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
        if len(contacts) == contacts_per_page:
            buttons.append([InlineKeyboardButton(text="–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", callback_data="contacts_page:next")])
        kb = InlineKeyboardMarkup(inline_keyboard=buttons)
        await dest_message.answer("–°–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π:", reply_markup=kb)
    except Exception as e:
        await dest_message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±—Ä–∞—â–µ–Ω–∏–π: <code>{e}</code>")
    finally:
        if conn:
            await conn.close()

# -------------------------------------------------
# Callback –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–°–≤—è–∑—å" (–∏–∑ –∞–¥–º–∏–Ω–ø–∞–Ω–µ–ª–∏)
# -------------------------------------------------
@router.callback_query(lambda query: query.data == "admin_contacts_list")
async def admin_contacts_list_callback(query: types.CallbackQuery, state: FSMContext):
    # –°—Ä–∞–∑—É –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π
    await send_contacts_list_to_admin(query.message, state)
    await query.answer()

# -------------------------------------------------
# Callback –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Å–ø–∏—Å–∫–∞ –æ–±—Ä–∞—â–µ–Ω–∏–π
# -------------------------------------------------
@router.callback_query(lambda q: q.data and q.data.startswith("contacts_page:"))
async def contacts_page_nav(query: types.CallbackQuery, state: FSMContext):
    direction = query.data.split(":", 1)[1]
    data = await state.get_data()
    page = data.get("contacts_page", 1)
    if direction == "next":
        page += 1
    else:
        page = max(1, page - 1)
    await state.update_data(contacts_page=page)
    await send_contacts_list_to_admin(query.message, state)
    await query.answer()

# -------------------------------------------------
# Callback –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è
# -------------------------------------------------
@router.callback_query(lambda q: q.data and q.data.startswith("contact_reply:"))
async def contact_reply_select(query: types.CallbackQuery, state: FSMContext):
    contact_id_str = query.data.split(":", 1)[1]
    try:
        contact_id = int(contact_id_str)
    except ValueError:
        await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ.", show_alert=True)
        return
    await state.update_data(contact_reply_id=contact_id)
    await query.message.answer("–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è:")
    await query.answer("–û–∂–∏–¥–∞–µ—Ç—Å—è –≤–∞—à –æ—Ç–≤–µ—Ç.")

# -------------------------------------------------
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ
# -------------------------------------------------
@router.message(lambda m: m.from_user.id == ADMIN_ID)
async def process_contact_reply(message: Message, state: FSMContext):
    data = await state.get_data()
    if "contact_reply_id" not in data or not data["contact_reply_id"]:
        return  # –ï—Å–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    contact_id = data["contact_reply_id"]
    conn = await get_connection()
    try:
        async with conn.cursor() as cur:
            await cur.execute("UPDATE contacts SET answered = TRUE WHERE id = %s", (contact_id,))
            await conn.commit()
        async with conn.cursor(DictCursor) as cur:
            await cur.execute("SELECT * FROM contacts WHERE id = %s", (contact_id,))
            contact = await cur.fetchone()
        if not contact:
            await message.answer("–û–±—Ä–∞—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            # –ù–µ –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ, —á—Ç–æ–±—ã —Å–ø–∏—Å–æ–∫ –æ—Å—Ç–∞–≤–∞–ª—Å—è –≤–∏–¥–∏–º—ã–º, –º–æ–∂–Ω–æ –∑–∞—Ç–µ–º –æ–±–Ω–æ–≤–∏—Ç—å –µ–≥–æ
            return
        target_user_id = contact.get("tg_id")
        await message.bot.send_message(target_user_id, f"üì® –û—Ç–≤–µ—Ç –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏:\n\n{message.text}")
        await message.answer("–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
        print(f"[ADMIN REPLY] –û—Ç–≤–µ—Ç –Ω–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ {contact_id} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}.")
        # –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∞–Ω–Ω–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –∏—Å—á–µ–∑–ª–æ
        await send_contacts_list_to_admin(message, state)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞: <code>{e}</code>")
    finally:
        # –û—á–∏—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–ª—é—á –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –¥–∞–Ω–Ω—ã–µ –æ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        current_state = await state.get_data()
        new_state = {}
        if "contacts_page" in current_state:
            new_state["contacts_page"] = current_state["contacts_page"]
        await state.set_data(new_state)
        if conn:
            await conn.close()
