from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import get_connection, safe_close

router = Router()

class PromoActivationState(StatesGroup):
    waiting_for_promo_code = State()

@router.message(F.text == "üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥—ã")
async def promo_activation_start(message: Message, state: FSMContext):
    # –û—Ç–ª–∞–¥–æ—á–Ω—ã–π –≤—ã–≤–æ–¥ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
    print(f"[PROMO] User {message.from_user.id} –Ω–∞–∂–∞–ª –Ω–∞ –∫–Ω–æ–ø–∫—É 'üéüÔ∏è –ü—Ä–æ–º–æ–∫–æ–¥—ã'")
    await state.set_state(PromoActivationState.waiting_for_promo_code)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥:")

@router.message(PromoActivationState.waiting_for_promo_code)
async def process_promo_activation(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è
    print(f"[PROMO] –ó–∞–ø—É—Å–∫ process_promo_activation –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    
    # –ü—Ä–∏–≤–æ–¥–∏–º –ø—Ä–æ–º–æ–∫–æ–¥ –∫ –µ–¥–∏–Ω–æ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤–µ—Ä—Ö–Ω–µ–º—É)
    code = message.text.strip().upper()
    print(f"[PROMO] User {message.from_user.id} –≤–≤—ë–ª –ø—Ä–æ–º–æ–∫–æ–¥: '{code}'")
    
    conn = await get_connection()
    try:
        # –ü–æ–∏—Å–∫ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –≤ —Ç–∞–±–ª–∏—Ü–µ promo_codes
        async with conn.cursor() as cur:
            await cur.execute("SELECT reward FROM promo_codes WHERE code = %s", (code,))
            row = await cur.fetchone()
        print(f"[PROMO] –ü–æ–ª—É—á–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞: {row}")
        
        if row is None:
            # –ï—Å–ª–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–∞–µ–º FSM
            await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            await state.clear()
            return
        
        reward = row[0]
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —ç—Ç–æ—Ç –ø—Ä–æ–º–æ–∫–æ–¥ —Ä–∞–Ω–µ–µ
        async with conn.cursor() as cur:
            await cur.execute("SELECT * FROM promo_codes_usage WHERE tg_id = %s AND code = %s", (message.from_user.id, code))
            usage = await cur.fetchone()
        print(f"[PROMO] –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞: {usage}")
        
        if usage is not None:
            await message.answer("–í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥!")
            await state.clear()
            return
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with conn.cursor() as cur:
            await cur.execute("INSERT INTO promo_codes_usage (tg_id, code) VALUES (%s, %s)", (message.from_user.id, code))
            await cur.execute("UPDATE users SET balance = balance + %s WHERE tg_id = %s", (reward, message.from_user.id))
        await conn.commit()
        print(f"[PROMO] –ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}, –Ω–∞—á–∏—Å–ª–µ–Ω–æ {reward} üíé")
        await message.answer(f"–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {reward} üíé.")
    except Exception as e:
        print(f"[PROMO ERROR] {e}")
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
    finally:
        await state.clear()
        await safe_close(conn)
