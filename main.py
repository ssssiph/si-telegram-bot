import asyncio, os
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
from sqlalchemy.ext.asyncio import create_async_engine, AsyncSession
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy import Column, Integer, String, select, update
from sqlalchemy.orm import sessionmaker

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")

bot = Bot(
    token=BOT_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

engine = create_async_engine(DATABASE_URL, echo=False)
Base = declarative_base()
async_session = sessionmaker(engine, class_=AsyncSession, expire_on_commit=False)

class User(Base):
    __tablename__ = "users"
    id = Column(Integer, primary_key=True)
    tg_id = Column(Integer, unique=True, nullable=False)
    username = Column(String)
    rank = Column(String, default="–ì–æ—Å—Ç—å")
    balance = Column(Integer, default=0)

async def create_db():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

menu_keyboard = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üë§ –ê–∫–∫–∞—É–Ω—Ç"), KeyboardButton(text="üéØ –°–æ–±—ã—Ç–∏—è")],
    [KeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton(text="üì© –°–≤—è–∑—å")],
    [KeyboardButton(text="üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")]
], resize_keyboard=True)

@dp.message(F.text.in_({"/start", "–Ω–∞—á–∞—Ç—å"}))
async def start_handler(message: Message):
    async with async_session() as session:
        user = await session.scalar(select(User).where(User.tg_id == message.from_user.id))
        if not user:
            user = User(
                tg_id=message.from_user.id,
                username=message.from_user.username,
                rank="–ì–æ—Å—Ç—å",
                balance=0
            )
            session.add(user)
            await session.commit()
    await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{message.from_user.full_name}</b>!", reply_markup=menu_keyboard)

@dp.message(F.text == "üë§ –ê–∫–∫–∞—É–Ω—Ç")
async def account_handler(message: Message):
    async with async_session() as session:
        user = await session.scalar(select(User).where(User.tg_id == message.from_user.id))
        if user:
            await message.answer(
                f"<b>üßæ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç:</b>\n"
                f"ID: <code>{user.tg_id}</code>\n"
                f"–ò–º—è: {message.from_user.full_name}\n"
                f"–Æ–∑–µ—Ä–Ω–µ–π–º: @{user.username}\n"
                f"–†–∞–Ω–≥: {user.rank}\n"
                f"üíé –ë–∞–ª–∞–Ω—Å: {user.balance}"
            )

@dp.message(F.text.startswith("/–≤—ã–¥–∞—Ç—å"))
async def give_diamonds(message: Message):
    async with async_session() as session:
        sender = await session.scalar(select(User).where(User.tg_id == message.from_user.id))
        if not sender or sender.rank != "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä":
            return await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        try:
            parts = message.text.split()
            target_id = int(parts[1])
            amount = int(parts[2])
        except:
            return await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /–≤—ã–¥–∞—Ç—å <tg_id> <–∫–æ–ª-–≤–æ>")
        user = await session.scalar(select(User).where(User.tg_id == target_id))
        if not user:
            return await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        user.balance += amount
        await session.commit()
        await message.answer(f"‚úÖ –í—ã–¥–∞–Ω–æ {amount} üíé –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.username or user.tg_id}")

@dp.message(F.text.startswith("/–∑–∞–±—Ä–∞—Ç—å"))
async def take_diamonds(message: Message):
    async with async_session() as session:
        sender = await session.scalar(select(User).where(User.tg_id == message.from_user.id))
        if not sender or sender.rank != "–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–π –¥–∏—Ä–µ–∫—Ç–æ—Ä":
            return await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        try:
            parts = message.text.split()
            target_id = int(parts[1])
            amount = int(parts[2])
        except:
            return await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /–∑–∞–±—Ä–∞—Ç—å <tg_id> <–∫–æ–ª-–≤–æ>")
        user = await session.scalar(select(User).where(User.tg_id == target_id))
        if not user:
            return await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        user.balance = max(0, user.balance - amount)
        await session.commit()
        await message.answer(f"‚ùå –ó–∞–±—Ä–∞–Ω–æ {amount} üíé —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.username or user.tg_id}")

async def main():
    await create_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
