import asyncio
import os
import asyncpg
from aiogram import Bot, Dispatcher, F, types
from aiogram.enums import ParseMode
from aiogram.types import (
    Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)
from aiogram.client.default import DefaultBotProperties
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL").replace("postgresql://", "postgresql+asyncpg://")

bot = Bot(token=BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher(storage=MemoryStorage())

DIRECTOR_ID = 1016554091

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
menu = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üë§ –ê–∫–∫–∞—É–Ω—Ç"), KeyboardButton(text="üéØ –°–æ–±—ã—Ç–∏—è")],
    [KeyboardButton(text="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), KeyboardButton(text="üì© –°–≤—è–∑—å")],
    [KeyboardButton(text="üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")]
], resize_keyboard=True)

# –ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞
director_menu = ReplyKeyboardMarkup(keyboard=[
    [KeyboardButton(text="üì© –°–≤—è–∑—å"), KeyboardButton(text="üîô –ù–∞–∑–∞–¥")]
], resize_keyboard=True)

# –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è "–°–≤—è–∑—å"
user_in_contact = set()

async def create_tables(conn):
    await conn.execute("""
    CREATE TABLE IF NOT EXISTS users (
        tg_id BIGINT PRIMARY KEY,
        username TEXT,
        rank TEXT DEFAULT '–ì–æ—Å—Ç—å',
        balance INTEGER DEFAULT 0
    );
    """)

async def get_or_create_user(conn, user):
    existing = await conn.fetchrow("SELECT * FROM users WHERE tg_id = $1", user.id)
    if not existing:
        await conn.execute(
            "INSERT INTO users (tg_id, username) VALUES ($1, $2)",
            user.id, user.username or ''
        )

@dp.message(F.text.in_({"/start", "–Ω–∞—á–∞—Ç—å"}))
async def start_handler(message: Message):
    async with asyncpg.create_pool(DATABASE_URL) as pool:
        async with pool.acquire() as conn:
            await create_tables(conn)
            await get_or_create_user(conn, message.from_user)

    await message.answer(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, <b>{message.from_user.full_name}</b>!", reply_markup=menu)

@dp.message(F.text == "üë§ –ê–∫–∫–∞—É–Ω—Ç")
async def account_handler(message: Message):
    async with asyncpg.create_pool(DATABASE_URL) as pool:
        async with pool.acquire() as conn:
            user = await conn.fetchrow("SELECT * FROM users WHERE tg_id = $1", message.from_user.id)
            if not user:
                await conn.execute(
                    "INSERT INTO users (tg_id, username) VALUES ($1, $2)",
                    message.from_user.id, message.from_user.username or ''
                )
                await message.answer("üÜï –í—ã –±—ã–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                return

            if message.from_user.username and user['username'] != message.from_user.username:
                await conn.execute(
                    "UPDATE users SET username = $1 WHERE tg_id = $2",
                    message.from_user.username, message.from_user.id
                )

            username = f"@{user['username']}" if user['username'] else "-"
            await message.answer(
                f"<b>üßæ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç:</b>\n"
                f"ID: <code>{user['tg_id']}</code>\n"
                f"–ò–º—è: {message.from_user.full_name}\n"
                f"–Æ–∑–µ—Ä–Ω–µ–π–º: {username}\n"
                f"–†–∞–Ω–≥: {user['rank']}\n"
                f"üíé –ë–∞–ª–∞–Ω—Å: {user['balance']}"
            )

@dp.message(F.text == "üéØ –°–æ–±—ã—Ç–∏—è")
@dp.message(F.text == "‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def soon_handler(message: Message):
    await message.answer("üöß –°–∫–æ—Ä–æ...")

@dp.message(F.text == "üì© –°–≤—è–∑—å")
async def contact_handler(message: Message):
    if message.from_user.id == DIRECTOR_ID:
        await message.answer("üì¨ –ó–¥–µ—Å—å –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.", reply_markup=director_menu)
    else:
        user_in_contact.add(message.from_user.id)
        await message.answer("üìù –û—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å, –º—ã —Å–∫–æ—Ä–æ –≤–∞–º –æ—Ç–≤–µ—Ç–∏–º.")

@dp.message(F.text == "üõ† –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
async def manage_handler(message: Message):
    if message.from_user.id == DIRECTOR_ID:
        await message.answer("üõ† –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.", reply_markup=director_menu)
    else:
        await message.answer("‚õî –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω. –¢–æ–ª—å–∫–æ –¥–ª—è –ì–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞.")

@dp.message(F.text == "üîô –ù–∞–∑–∞–¥")
async def back_handler(message: Message):
    if message.from_user.id == DIRECTOR_ID:
        await message.answer("üîô –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=menu)

# üëá –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ç–µ–∫—Å—Ç, —Ñ–æ—Ç–æ, –≥–æ–ª–æ—Å –∏ —Ç.–¥.)
@dp.message()
async def forward_to_director(message: Message):
    if message.from_user.id == DIRECTOR_ID:
        return  # –¥–∏—Ä–µ–∫—Ç–æ—Ä –Ω–µ –¥–æ–ª–∂–µ–Ω —Å–∞–º —Å–µ–±–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
    if message.from_user.id not in user_in_contact:
        return  # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–∞–ª "–°–≤—è–∑—å"

    try:
        sender = f"@{message.from_user.username}" if message.from_user.username else message.from_user.full_name
        header = f"üì® <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç:</b> {sender} (ID: <code>{message.from_user.id}</code>)"

        if message.text:
            await bot.send_message(DIRECTOR_ID, f"{header}\n\n{message.text}")
        elif message.voice:
            await bot.send_message(DIRECTOR_ID, header)
            await bot.send_voice(DIRECTOR_ID, message.voice.file_id)
        elif message.photo:
            await bot.send_message(DIRECTOR_ID, header)
            await bot.send_photo(DIRECTOR_ID, message.photo[-1].file_id, caption=message.caption or "")
        elif message.document:
            await bot.send_message(DIRECTOR_ID, header)
            await bot.send_document(DIRECTOR_ID, message.document.file_id, caption=message.caption or "")
        else:
            await bot.send_message(DIRECTOR_ID, f"{header}\n(–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è)")

    except Exception as e:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
